/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Lenders API
 * 대출업체 데이터 조회 API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  GetLenderByIdLendersLenderIdGet200,
  GetLendersLendersGetParams,
  HTTPValidationError,
  PaginationLenderDTO,
  SearchLendersSearchLendersGetParams,
} from "../../const";

import { customInstanceLenders } from "../../../shared/axios/lib/customInstanceLenders";
import type { ErrorType } from "../../../shared/axios/lib/customInstanceLenders";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * 대출업체 목록을 검색어, 페이지네이션과 함께 조회합니다.
 * @summary 대출업체 목록 조회
 */
export const getLendersLendersGet = (
  params?: GetLendersLendersGetParams,
  options?: SecondParameter<typeof customInstanceLenders>,
  signal?: AbortSignal,
) => {
  return customInstanceLenders<PaginationLenderDTO>(
    { url: `/lenders/`, method: "GET", params, signal },
    options,
  );
};

export const getGetLendersLendersGetQueryKey = (
  params?: GetLendersLendersGetParams,
) => {
  return [`/lenders/`, ...(params ? [params] : [])] as const;
};

export const getGetLendersLendersGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getLendersLendersGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params?: GetLendersLendersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLendersLendersGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstanceLenders>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetLendersLendersGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLendersLendersGet>>
  > = ({ signal }) => getLendersLendersGet(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLendersLendersGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetLendersLendersGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLendersLendersGet>>
>;
export type GetLendersLendersGetQueryError = ErrorType<HTTPValidationError>;

export function useGetLendersLendersGet<
  TData = Awaited<ReturnType<typeof getLendersLendersGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params: undefined | GetLendersLendersGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLendersLendersGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLendersLendersGet>>,
          TError,
          Awaited<ReturnType<typeof getLendersLendersGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstanceLenders>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLendersLendersGet<
  TData = Awaited<ReturnType<typeof getLendersLendersGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params?: GetLendersLendersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLendersLendersGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLendersLendersGet>>,
          TError,
          Awaited<ReturnType<typeof getLendersLendersGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstanceLenders>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLendersLendersGet<
  TData = Awaited<ReturnType<typeof getLendersLendersGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params?: GetLendersLendersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLendersLendersGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstanceLenders>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary 대출업체 목록 조회
 */

export function useGetLendersLendersGet<
  TData = Awaited<ReturnType<typeof getLendersLendersGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params?: GetLendersLendersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLendersLendersGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstanceLenders>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetLendersLendersGetQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ID로 대출업체 상세 정보를 조회합니다.
 * @summary 대출업체 상세 조회
 */
export const getLenderByIdLendersLenderIdGet = (
  lenderId: number,
  options?: SecondParameter<typeof customInstanceLenders>,
  signal?: AbortSignal,
) => {
  return customInstanceLenders<GetLenderByIdLendersLenderIdGet200>(
    { url: `/lenders/${lenderId}`, method: "GET", signal },
    options,
  );
};

export const getGetLenderByIdLendersLenderIdGetQueryKey = (
  lenderId: number,
) => {
  return [`/lenders/${lenderId}`] as const;
};

export const getGetLenderByIdLendersLenderIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getLenderByIdLendersLenderIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  lenderId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLenderByIdLendersLenderIdGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstanceLenders>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetLenderByIdLendersLenderIdGetQueryKey(lenderId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLenderByIdLendersLenderIdGet>>
  > = ({ signal }) =>
    getLenderByIdLendersLenderIdGet(lenderId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!lenderId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getLenderByIdLendersLenderIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetLenderByIdLendersLenderIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLenderByIdLendersLenderIdGet>>
>;
export type GetLenderByIdLendersLenderIdGetQueryError =
  ErrorType<HTTPValidationError>;

export function useGetLenderByIdLendersLenderIdGet<
  TData = Awaited<ReturnType<typeof getLenderByIdLendersLenderIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  lenderId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLenderByIdLendersLenderIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLenderByIdLendersLenderIdGet>>,
          TError,
          Awaited<ReturnType<typeof getLenderByIdLendersLenderIdGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstanceLenders>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLenderByIdLendersLenderIdGet<
  TData = Awaited<ReturnType<typeof getLenderByIdLendersLenderIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  lenderId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLenderByIdLendersLenderIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLenderByIdLendersLenderIdGet>>,
          TError,
          Awaited<ReturnType<typeof getLenderByIdLendersLenderIdGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstanceLenders>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLenderByIdLendersLenderIdGet<
  TData = Awaited<ReturnType<typeof getLenderByIdLendersLenderIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  lenderId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLenderByIdLendersLenderIdGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstanceLenders>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary 대출업체 상세 조회
 */

export function useGetLenderByIdLendersLenderIdGet<
  TData = Awaited<ReturnType<typeof getLenderByIdLendersLenderIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  lenderId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLenderByIdLendersLenderIdGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstanceLenders>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetLenderByIdLendersLenderIdGetQueryOptions(
    lenderId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 대출업체 데이터를 검색합니다.
 * @summary 대출업체 검색
 */
export const searchLendersSearchLendersGet = (
  params: SearchLendersSearchLendersGetParams,
  options?: SecondParameter<typeof customInstanceLenders>,
  signal?: AbortSignal,
) => {
  return customInstanceLenders<PaginationLenderDTO>(
    { url: `/search-lenders/`, method: "GET", params, signal },
    options,
  );
};

export const getSearchLendersSearchLendersGetQueryKey = (
  params: SearchLendersSearchLendersGetParams,
) => {
  return [`/search-lenders/`, ...(params ? [params] : [])] as const;
};

export const getSearchLendersSearchLendersGetQueryOptions = <
  TData = Awaited<ReturnType<typeof searchLendersSearchLendersGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params: SearchLendersSearchLendersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchLendersSearchLendersGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstanceLenders>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSearchLendersSearchLendersGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof searchLendersSearchLendersGet>>
  > = ({ signal }) =>
    searchLendersSearchLendersGet(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchLendersSearchLendersGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SearchLendersSearchLendersGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchLendersSearchLendersGet>>
>;
export type SearchLendersSearchLendersGetQueryError =
  ErrorType<HTTPValidationError>;

export function useSearchLendersSearchLendersGet<
  TData = Awaited<ReturnType<typeof searchLendersSearchLendersGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params: SearchLendersSearchLendersGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchLendersSearchLendersGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchLendersSearchLendersGet>>,
          TError,
          Awaited<ReturnType<typeof searchLendersSearchLendersGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstanceLenders>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchLendersSearchLendersGet<
  TData = Awaited<ReturnType<typeof searchLendersSearchLendersGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params: SearchLendersSearchLendersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchLendersSearchLendersGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchLendersSearchLendersGet>>,
          TError,
          Awaited<ReturnType<typeof searchLendersSearchLendersGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstanceLenders>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchLendersSearchLendersGet<
  TData = Awaited<ReturnType<typeof searchLendersSearchLendersGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params: SearchLendersSearchLendersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchLendersSearchLendersGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstanceLenders>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary 대출업체 검색
 */

export function useSearchLendersSearchLendersGet<
  TData = Awaited<ReturnType<typeof searchLendersSearchLendersGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params: SearchLendersSearchLendersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchLendersSearchLendersGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstanceLenders>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSearchLendersSearchLendersGetQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
