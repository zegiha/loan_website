/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Loan API
 * Loan API description
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  AdminAccountCreateDto,
  AdminLoginDto,
  AdminResponseDto,
  AdminVerifyDto,
} from "../../const";

import { customInstance } from "../../../shared/axios/lib/customInstance";
import type {
  ErrorType,
  BodyType,
} from "../../../shared/axios/lib/customInstance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const adminControllerFindAll = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdminResponseDto[]>(
    { url: `/admin`, method: "GET", signal },
    options,
  );
};

export const getAdminControllerFindAllQueryKey = () => {
  return [`/admin`] as const;
};

export const getAdminControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof adminControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof adminControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminControllerFindAll>>
  > = ({ signal }) => adminControllerFindAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminControllerFindAll>>
>;
export type AdminControllerFindAllQueryError = ErrorType<unknown>;

export function useAdminControllerFindAll<
  TData = Awaited<ReturnType<typeof adminControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof adminControllerFindAll>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminControllerFindAll<
  TData = Awaited<ReturnType<typeof adminControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof adminControllerFindAll>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminControllerFindAll<
  TData = Awaited<ReturnType<typeof adminControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useAdminControllerFindAll<
  TData = Awaited<ReturnType<typeof adminControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const adminControllerDeleteAdmin = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>({ url: `/admin`, method: "DELETE" }, options);
};

export const getAdminControllerDeleteAdminMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminControllerDeleteAdmin>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminControllerDeleteAdmin>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["adminControllerDeleteAdmin"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminControllerDeleteAdmin>>,
    void
  > = () => {
    return adminControllerDeleteAdmin(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminControllerDeleteAdminMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminControllerDeleteAdmin>>
>;

export type AdminControllerDeleteAdminMutationError = ErrorType<unknown>;

export const useAdminControllerDeleteAdmin = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminControllerDeleteAdmin>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adminControllerDeleteAdmin>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAdminControllerDeleteAdminMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const adminControllerCreate = (
  adminAccountCreateDto: BodyType<AdminAccountCreateDto>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdminResponseDto>(
    {
      url: `/admin/create`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: adminAccountCreateDto,
      signal,
    },
    options,
  );
};

export const getAdminControllerCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminControllerCreate>>,
    TError,
    { data: BodyType<AdminAccountCreateDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminControllerCreate>>,
  TError,
  { data: BodyType<AdminAccountCreateDto> },
  TContext
> => {
  const mutationKey = ["adminControllerCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminControllerCreate>>,
    { data: BodyType<AdminAccountCreateDto> }
  > = (props) => {
    const { data } = props ?? {};

    return adminControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminControllerCreate>>
>;
export type AdminControllerCreateMutationBody = BodyType<AdminAccountCreateDto>;
export type AdminControllerCreateMutationError = ErrorType<unknown>;

export const useAdminControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminControllerCreate>>,
      TError,
      { data: BodyType<AdminAccountCreateDto> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adminControllerCreate>>,
  TError,
  { data: BodyType<AdminAccountCreateDto> },
  TContext
> => {
  const mutationOptions = getAdminControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const adminControllerDelete = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/admin/${id}`, method: "DELETE" },
    options,
  );
};

export const getAdminControllerDeleteMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminControllerDelete>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminControllerDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["adminControllerDelete"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminControllerDelete>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return adminControllerDelete(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminControllerDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminControllerDelete>>
>;

export type AdminControllerDeleteMutationError = ErrorType<unknown>;

export const useAdminControllerDelete = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminControllerDelete>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adminControllerDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getAdminControllerDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const adminControllerCreateSuperAdmin = (
  adminAccountCreateDto: BodyType<AdminAccountCreateDto>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdminResponseDto>(
    {
      url: `/admin/create/super`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: adminAccountCreateDto,
      signal,
    },
    options,
  );
};

export const getAdminControllerCreateSuperAdminMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminControllerCreateSuperAdmin>>,
    TError,
    { data: BodyType<AdminAccountCreateDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminControllerCreateSuperAdmin>>,
  TError,
  { data: BodyType<AdminAccountCreateDto> },
  TContext
> => {
  const mutationKey = ["adminControllerCreateSuperAdmin"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminControllerCreateSuperAdmin>>,
    { data: BodyType<AdminAccountCreateDto> }
  > = (props) => {
    const { data } = props ?? {};

    return adminControllerCreateSuperAdmin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminControllerCreateSuperAdminMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminControllerCreateSuperAdmin>>
>;
export type AdminControllerCreateSuperAdminMutationBody =
  BodyType<AdminAccountCreateDto>;
export type AdminControllerCreateSuperAdminMutationError = ErrorType<unknown>;

export const useAdminControllerCreateSuperAdmin = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminControllerCreateSuperAdmin>>,
      TError,
      { data: BodyType<AdminAccountCreateDto> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adminControllerCreateSuperAdmin>>,
  TError,
  { data: BodyType<AdminAccountCreateDto> },
  TContext
> => {
  const mutationOptions =
    getAdminControllerCreateSuperAdminMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const adminControllerLogin = (
  adminLoginDto: BodyType<AdminLoginDto>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    {
      url: `/admin/login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: adminLoginDto,
      signal,
    },
    options,
  );
};

export const getAdminControllerLoginMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminControllerLogin>>,
    TError,
    { data: BodyType<AdminLoginDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminControllerLogin>>,
  TError,
  { data: BodyType<AdminLoginDto> },
  TContext
> => {
  const mutationKey = ["adminControllerLogin"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminControllerLogin>>,
    { data: BodyType<AdminLoginDto> }
  > = (props) => {
    const { data } = props ?? {};

    return adminControllerLogin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminControllerLogin>>
>;
export type AdminControllerLoginMutationBody = BodyType<AdminLoginDto>;
export type AdminControllerLoginMutationError = ErrorType<unknown>;

export const useAdminControllerLogin = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminControllerLogin>>,
      TError,
      { data: BodyType<AdminLoginDto> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adminControllerLogin>>,
  TError,
  { data: BodyType<AdminLoginDto> },
  TContext
> => {
  const mutationOptions = getAdminControllerLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const adminControllerRefresh = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/admin/refresh`, method: "GET", signal },
    options,
  );
};

export const getAdminControllerRefreshQueryKey = () => {
  return [`/admin/refresh`] as const;
};

export const getAdminControllerRefreshQueryOptions = <
  TData = Awaited<ReturnType<typeof adminControllerRefresh>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof adminControllerRefresh>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminControllerRefreshQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminControllerRefresh>>
  > = ({ signal }) => adminControllerRefresh(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminControllerRefresh>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminControllerRefreshQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminControllerRefresh>>
>;
export type AdminControllerRefreshQueryError = ErrorType<unknown>;

export function useAdminControllerRefresh<
  TData = Awaited<ReturnType<typeof adminControllerRefresh>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerRefresh>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminControllerRefresh>>,
          TError,
          Awaited<ReturnType<typeof adminControllerRefresh>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminControllerRefresh<
  TData = Awaited<ReturnType<typeof adminControllerRefresh>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerRefresh>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminControllerRefresh>>,
          TError,
          Awaited<ReturnType<typeof adminControllerRefresh>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminControllerRefresh<
  TData = Awaited<ReturnType<typeof adminControllerRefresh>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerRefresh>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useAdminControllerRefresh<
  TData = Awaited<ReturnType<typeof adminControllerRefresh>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerRefresh>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminControllerRefreshQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const adminControllerProfile = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdminResponseDto>(
    { url: `/admin/profile`, method: "GET", signal },
    options,
  );
};

export const getAdminControllerProfileQueryKey = () => {
  return [`/admin/profile`] as const;
};

export const getAdminControllerProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof adminControllerProfile>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof adminControllerProfile>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminControllerProfileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminControllerProfile>>
  > = ({ signal }) => adminControllerProfile(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminControllerProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminControllerProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminControllerProfile>>
>;
export type AdminControllerProfileQueryError = ErrorType<unknown>;

export function useAdminControllerProfile<
  TData = Awaited<ReturnType<typeof adminControllerProfile>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminControllerProfile>>,
          TError,
          Awaited<ReturnType<typeof adminControllerProfile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminControllerProfile<
  TData = Awaited<ReturnType<typeof adminControllerProfile>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminControllerProfile>>,
          TError,
          Awaited<ReturnType<typeof adminControllerProfile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminControllerProfile<
  TData = Awaited<ReturnType<typeof adminControllerProfile>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useAdminControllerProfile<
  TData = Awaited<ReturnType<typeof adminControllerProfile>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminControllerProfileQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const adminControllerUpdateProfile = (
  adminAccountCreateDto: BodyType<AdminAccountCreateDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdminResponseDto>(
    {
      url: `/admin/profile`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: adminAccountCreateDto,
    },
    options,
  );
};

export const getAdminControllerUpdateProfileMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminControllerUpdateProfile>>,
    TError,
    { data: BodyType<AdminAccountCreateDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminControllerUpdateProfile>>,
  TError,
  { data: BodyType<AdminAccountCreateDto> },
  TContext
> => {
  const mutationKey = ["adminControllerUpdateProfile"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminControllerUpdateProfile>>,
    { data: BodyType<AdminAccountCreateDto> }
  > = (props) => {
    const { data } = props ?? {};

    return adminControllerUpdateProfile(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminControllerUpdateProfileMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminControllerUpdateProfile>>
>;
export type AdminControllerUpdateProfileMutationBody =
  BodyType<AdminAccountCreateDto>;
export type AdminControllerUpdateProfileMutationError = ErrorType<unknown>;

export const useAdminControllerUpdateProfile = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminControllerUpdateProfile>>,
      TError,
      { data: BodyType<AdminAccountCreateDto> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adminControllerUpdateProfile>>,
  TError,
  { data: BodyType<AdminAccountCreateDto> },
  TContext
> => {
  const mutationOptions =
    getAdminControllerUpdateProfileMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const adminControllerVerify = (
  adminVerifyDto: BodyType<AdminVerifyDto>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    {
      url: `/admin/verify`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: adminVerifyDto,
      signal,
    },
    options,
  );
};

export const getAdminControllerVerifyMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminControllerVerify>>,
    TError,
    { data: BodyType<AdminVerifyDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminControllerVerify>>,
  TError,
  { data: BodyType<AdminVerifyDto> },
  TContext
> => {
  const mutationKey = ["adminControllerVerify"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminControllerVerify>>,
    { data: BodyType<AdminVerifyDto> }
  > = (props) => {
    const { data } = props ?? {};

    return adminControllerVerify(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminControllerVerifyMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminControllerVerify>>
>;
export type AdminControllerVerifyMutationBody = BodyType<AdminVerifyDto>;
export type AdminControllerVerifyMutationError = ErrorType<unknown>;

export const useAdminControllerVerify = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminControllerVerify>>,
      TError,
      { data: BodyType<AdminVerifyDto> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adminControllerVerify>>,
  TError,
  { data: BodyType<AdminVerifyDto> },
  TContext
> => {
  const mutationOptions = getAdminControllerVerifyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
