/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Loan API
 * ÏßÄÏó≠, ÏÉÅÌíà Îì±ÏùÑ QueryÎ•º ÌÜµÌï¥ Ïó¨Îü¨ Í∞úÎ•º Î≥¥ÎÇº ÎïåÎäî ÏΩ§Îßà(,)Î°ú Íµ¨Î∂ÑÌïòÏó¨ Î≥¥ÎÇ¥Ï£ºÏÑ∏Ïöî. ÏòàÏãú: ?location=ÏÑúÏö∏,Î∂ÄÏÇ∞,ÎåÄÍµ¨
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  AdResponseDto,
  AdsPublicControllerFindBannerAdsParams,
  AdsPublicControllerFindLineAdsParams,
  AdsPublicControllerRequestCountExtendParams,
  AdsPublicControllerRequestDateExtendParams,
  AdsPublicControllerSearchAdsParams,
  CreateAdvertisementDto,
  IsSponsorLinkAvailableResponseDto,
  LocationAdCountRespDto,
  ProductTypeAdCountRespDto,
  ScrollAdResponseDto,
  UpdateAdvertisementDto,
  WrappedAdResponseDto,
  WrappedScrollAdResponseDto,
} from "../../const";

import { customInstance } from "../../../shared/axios/lib/customInstance";
import type {
  ErrorType,
  BodyType,
} from "../../../shared/axios/lib/customInstance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Create advertisement
 */
export const adsPublicControllerCreate = (
  createAdvertisementDto: BodyType<CreateAdvertisementDto[]>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    {
      url: `/ads`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createAdvertisementDto,
      signal,
    },
    options,
  );
};

export const getAdsPublicControllerCreateMutationOptions = <
  TError = ErrorType<AdResponseDto[]>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPublicControllerCreate>>,
    TError,
    { data: BodyType<CreateAdvertisementDto[]> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPublicControllerCreate>>,
  TError,
  { data: BodyType<CreateAdvertisementDto[]> },
  TContext
> => {
  const mutationKey = ["adsPublicControllerCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPublicControllerCreate>>,
    { data: BodyType<CreateAdvertisementDto[]> }
  > = (props) => {
    const { data } = props ?? {};

    return adsPublicControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPublicControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerCreate>>
>;
export type AdsPublicControllerCreateMutationBody = BodyType<
  CreateAdvertisementDto[]
>;
export type AdsPublicControllerCreateMutationError = ErrorType<AdResponseDto[]>;

/**
 * @summary Create advertisement
 */
export const useAdsPublicControllerCreate = <
  TError = ErrorType<AdResponseDto[]>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPublicControllerCreate>>,
      TError,
      { data: BodyType<CreateAdvertisementDto[]> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPublicControllerCreate>>,
  TError,
  { data: BodyType<CreateAdvertisementDto[]> },
  TContext
> => {
  const mutationOptions = getAdsPublicControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Check if sponsor link is available
 */
export const adsPublicControllerIsSponsorLinkAvailable = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<IsSponsorLinkAvailableResponseDto>(
    { url: `/ads/sponsor-link-available`, method: "GET", signal },
    options,
  );
};

export const getAdsPublicControllerIsSponsorLinkAvailableQueryKey = () => {
  return [`/ads/sponsor-link-available`] as const;
};

export const getAdsPublicControllerIsSponsorLinkAvailableQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPublicControllerIsSponsorLinkAvailable>>,
  TError = ErrorType<IsSponsorLinkAvailableResponseDto>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof adsPublicControllerIsSponsorLinkAvailable>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPublicControllerIsSponsorLinkAvailableQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPublicControllerIsSponsorLinkAvailable>>
  > = ({ signal }) =>
    adsPublicControllerIsSponsorLinkAvailable(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPublicControllerIsSponsorLinkAvailable>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPublicControllerIsSponsorLinkAvailableQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerIsSponsorLinkAvailable>>
>;
export type AdsPublicControllerIsSponsorLinkAvailableQueryError =
  ErrorType<IsSponsorLinkAvailableResponseDto>;

export function useAdsPublicControllerIsSponsorLinkAvailable<
  TData = Awaited<ReturnType<typeof adsPublicControllerIsSponsorLinkAvailable>>,
  TError = ErrorType<IsSponsorLinkAvailableResponseDto>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerIsSponsorLinkAvailable>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerIsSponsorLinkAvailable>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerIsSponsorLinkAvailable>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerIsSponsorLinkAvailable<
  TData = Awaited<ReturnType<typeof adsPublicControllerIsSponsorLinkAvailable>>,
  TError = ErrorType<IsSponsorLinkAvailableResponseDto>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerIsSponsorLinkAvailable>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerIsSponsorLinkAvailable>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerIsSponsorLinkAvailable>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerIsSponsorLinkAvailable<
  TData = Awaited<ReturnType<typeof adsPublicControllerIsSponsorLinkAvailable>>,
  TError = ErrorType<IsSponsorLinkAvailableResponseDto>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerIsSponsorLinkAvailable>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Check if sponsor link is available
 */

export function useAdsPublicControllerIsSponsorLinkAvailable<
  TData = Awaited<ReturnType<typeof adsPublicControllerIsSponsorLinkAvailable>>,
  TError = ErrorType<IsSponsorLinkAvailableResponseDto>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerIsSponsorLinkAvailable>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getAdsPublicControllerIsSponsorLinkAvailableQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Ï§ÑÍ¥ëÍ≥†Îäî Ï°∞ÌöåÍ∞Ä Î∂àÍ∞ÄÌï©ÎãàÎã§. typeÏóêÎäî all ÎòêÎäî AdType enumÏóê ÏûàÎäî Í∞íÏùÑ ÏÇ¨Ïö©Ìï¥Ï£ºÏÑ∏Ïöî.
 * @summary Search advertisements by type
 */
export const adsPublicControllerSearchAds = (
  type: string,
  page: string,
  limit: string,
  params?: AdsPublicControllerSearchAdsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<WrappedAdResponseDto>(
    {
      url: `/ads/search/${type}/${page}/${limit}`,
      method: "GET",
      params,
      signal,
    },
    options,
  );
};

export const getAdsPublicControllerSearchAdsQueryKey = (
  type: string,
  page: string,
  limit: string,
  params?: AdsPublicControllerSearchAdsParams,
) => {
  return [
    `/ads/search/${type}/${page}/${limit}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getAdsPublicControllerSearchAdsQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
  TError = ErrorType<WrappedAdResponseDto[]>,
>(
  type: string,
  page: string,
  limit: string,
  params?: AdsPublicControllerSearchAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPublicControllerSearchAdsQueryKey(type, page, limit, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPublicControllerSearchAds>>
  > = ({ signal }) =>
    adsPublicControllerSearchAds(
      type,
      page,
      limit,
      params,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(type && page && limit),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPublicControllerSearchAdsQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerSearchAds>>
>;
export type AdsPublicControllerSearchAdsQueryError = ErrorType<
  WrappedAdResponseDto[]
>;

export function useAdsPublicControllerSearchAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
  TError = ErrorType<WrappedAdResponseDto[]>,
>(
  type: string,
  page: string,
  limit: string,
  params: undefined | AdsPublicControllerSearchAdsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerSearchAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerSearchAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
  TError = ErrorType<WrappedAdResponseDto>,
>(
  type: string,
  page: string,
  limit: string,
  params?: AdsPublicControllerSearchAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerSearchAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerSearchAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
  TError = ErrorType<WrappedAdResponseDto[]>,
>(
  type: string,
  page: string,
  limit: string,
  params?: AdsPublicControllerSearchAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Search advertisements by type
 */

export function useAdsPublicControllerSearchAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
  TError = ErrorType<WrappedAdResponseDto[]>,
>(
  type: string,
  page: string,
  limit: string,
  params?: AdsPublicControllerSearchAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdsPublicControllerSearchAdsQueryOptions(
    type,
    page,
    limit,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Ï§ÑÍ¥ëÍ≥†Îäî Ï°∞ÌöåÍ∞Ä Î∂àÍ∞ÄÌï©ÎãàÎã§.
 * @summary Get all advertisements
 */
export const adsPublicControllerFindAll = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    { url: `/ads/all`, method: "GET", signal },
    options,
  );
};

export const getAdsPublicControllerFindAllQueryKey = () => {
  return [`/ads/all`] as const;
};

export const getAdsPublicControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
  TError = ErrorType<AdResponseDto[]>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdsPublicControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPublicControllerFindAll>>
  > = ({ signal }) => adsPublicControllerFindAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPublicControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerFindAll>>
>;
export type AdsPublicControllerFindAllQueryError = ErrorType<AdResponseDto[]>;

export function useAdsPublicControllerFindAll<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindAll>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindAll<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindAll>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindAll<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all advertisements
 */

export function useAdsPublicControllerFindAll<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdsPublicControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Ï§ÑÍ¥ëÍ≥†Îäî Ï°∞ÌöåÍ∞Ä Î∂àÍ∞ÄÌï©ÎãàÎã§.
 * @summary Get all of my advertisements
 */
export const adsPublicControllerFindAllofMyAds = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    { url: `/ads/my`, method: "GET", signal },
    options,
  );
};

export const getAdsPublicControllerFindAllofMyAdsQueryKey = () => {
  return [`/ads/my`] as const;
};

export const getAdsPublicControllerFindAllofMyAdsQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdsPublicControllerFindAllofMyAdsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>
  > = ({ signal }) => adsPublicControllerFindAllofMyAds(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPublicControllerFindAllofMyAdsQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>
>;
export type AdsPublicControllerFindAllofMyAdsQueryError = ErrorType<
  AdResponseDto[]
>;

export function useAdsPublicControllerFindAllofMyAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindAllofMyAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindAllofMyAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of my advertisements
 */

export function useAdsPublicControllerFindAllofMyAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getAdsPublicControllerFindAllofMyAdsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Ï§ÑÍ¥ëÍ≥†ÎèÑ Ï°∞Ìöå Í∞ÄÎä•ÌïòÎ©∞, idÎäî UUID ÌòïÏãùÏù¥Ïó¨Ïïº Ìï©ÎãàÎã§.
 * @summary Get advertisement by ID
 */
export const adsPublicControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/id/common/${id}`, method: "GET", signal },
    options,
  );
};

export const getAdsPublicControllerFindOneQueryKey = (id: string) => {
  return [`/ads/id/common/${id}`] as const;
};

export const getAdsPublicControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
  TError = ErrorType<void | AdResponseDto>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdsPublicControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPublicControllerFindOne>>
  > = ({ signal }) => adsPublicControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPublicControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerFindOne>>
>;
export type AdsPublicControllerFindOneQueryError =
  ErrorType<void | AdResponseDto>;

export function useAdsPublicControllerFindOne<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
  TError = ErrorType<void | AdResponseDto>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindOne>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindOne<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
  TError = ErrorType<void | AdResponseDto>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindOne>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindOne<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
  TError = ErrorType<void | AdResponseDto>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get advertisement by ID
 */

export function useAdsPublicControllerFindOne<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
  TError = ErrorType<void | AdResponseDto>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdsPublicControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Ï§ÑÍ¥ëÍ≥†ÎèÑ Ï°∞Ìöå Í∞ÄÎä•ÌïòÎ©∞, idÎäî UUID ÌòïÏãùÏù¥Ïó¨Ïïº Ìï©ÎãàÎã§.
 * @summary Get line advertisement by ID
 */
export const adsPublicControllerFindLineOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ScrollAdResponseDto>(
    { url: `/ads/id/line/${id}`, method: "GET", signal },
    options,
  );
};

export const getAdsPublicControllerFindLineOneQueryKey = (id: string) => {
  return [`/ads/id/line/${id}`] as const;
};

export const getAdsPublicControllerFindLineOneQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPublicControllerFindLineOne>>,
  TError = ErrorType<void | ScrollAdResponseDto>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindLineOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdsPublicControllerFindLineOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPublicControllerFindLineOne>>
  > = ({ signal }) =>
    adsPublicControllerFindLineOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPublicControllerFindLineOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPublicControllerFindLineOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerFindLineOne>>
>;
export type AdsPublicControllerFindLineOneQueryError =
  ErrorType<void | ScrollAdResponseDto>;

export function useAdsPublicControllerFindLineOne<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindLineOne>>,
  TError = ErrorType<void | ScrollAdResponseDto>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindLineOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindLineOne>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindLineOne>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindLineOne<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindLineOne>>,
  TError = ErrorType<void | ScrollAdResponseDto>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindLineOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindLineOne>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindLineOne>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindLineOne<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindLineOne>>,
  TError = ErrorType<void | ScrollAdResponseDto>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindLineOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get line advertisement by ID
 */

export function useAdsPublicControllerFindLineOne<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindLineOne>>,
  TError = ErrorType<void | ScrollAdResponseDto>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindLineOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdsPublicControllerFindLineOneQueryOptions(
    id,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ad_type: (all, main, location, product)
 * @summary Get line advertisements
 */
export const adsPublicControllerFindLineAds = (
  adType: string,
  limit: string,
  page: string,
  params?: AdsPublicControllerFindLineAdsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<WrappedScrollAdResponseDto>(
    {
      url: `/ads/line-ads/${adType}/${limit}/${page}`,
      method: "GET",
      params,
      signal,
    },
    options,
  );
};

export const getAdsPublicControllerFindLineAdsQueryKey = (
  adType: string,
  limit: string,
  page: string,
  params?: AdsPublicControllerFindLineAdsParams,
) => {
  return [
    `/ads/line-ads/${adType}/${limit}/${page}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getAdsPublicControllerFindLineAdsQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
  TError = ErrorType<WrappedScrollAdResponseDto>,
>(
  adType: string,
  limit: string,
  page: string,
  params?: AdsPublicControllerFindLineAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPublicControllerFindLineAdsQueryKey(adType, limit, page, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>
  > = ({ signal }) =>
    adsPublicControllerFindLineAds(
      adType,
      limit,
      page,
      params,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(adType && limit && page),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPublicControllerFindLineAdsQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>
>;
export type AdsPublicControllerFindLineAdsQueryError =
  ErrorType<WrappedScrollAdResponseDto>;

export function useAdsPublicControllerFindLineAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
  TError = ErrorType<WrappedScrollAdResponseDto>,
>(
  adType: string,
  limit: string,
  page: string,
  params: undefined | AdsPublicControllerFindLineAdsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindLineAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
  TError = ErrorType<WrappedScrollAdResponseDto>,
>(
  adType: string,
  limit: string,
  page: string,
  params?: AdsPublicControllerFindLineAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindLineAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
  TError = ErrorType<WrappedScrollAdResponseDto>,
>(
  adType: string,
  limit: string,
  page: string,
  params?: AdsPublicControllerFindLineAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get line advertisements
 */

export function useAdsPublicControllerFindLineAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
  TError = ErrorType<WrappedScrollAdResponseDto>,
>(
  adType: string,
  limit: string,
  page: string,
  params?: AdsPublicControllerFindLineAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdsPublicControllerFindLineAdsQueryOptions(
    adType,
    limit,
    page,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get banner advertisements
 */
export const adsPublicControllerFindBannerAds = (
  limit: string,
  page: string,
  location: string,
  params?: AdsPublicControllerFindBannerAdsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<WrappedAdResponseDto>(
    {
      url: `/ads/banner-ads/${limit}/${page}/${location}`,
      method: "GET",
      params,
      signal,
    },
    options,
  );
};

export const getAdsPublicControllerFindBannerAdsQueryKey = (
  limit: string,
  page: string,
  location: string,
  params?: AdsPublicControllerFindBannerAdsParams,
) => {
  return [
    `/ads/banner-ads/${limit}/${page}/${location}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getAdsPublicControllerFindBannerAdsQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
  TError = ErrorType<WrappedAdResponseDto>,
>(
  limit: string,
  page: string,
  location: string,
  params?: AdsPublicControllerFindBannerAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPublicControllerFindBannerAdsQueryKey(limit, page, location, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>
  > = ({ signal }) =>
    adsPublicControllerFindBannerAds(
      limit,
      page,
      location,
      params,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(limit && page && location),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPublicControllerFindBannerAdsQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>
>;
export type AdsPublicControllerFindBannerAdsQueryError =
  ErrorType<WrappedAdResponseDto>;

export function useAdsPublicControllerFindBannerAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
  TError = ErrorType<WrappedAdResponseDto>,
>(
  limit: string,
  page: string,
  location: string,
  params: undefined | AdsPublicControllerFindBannerAdsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindBannerAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
  TError = ErrorType<WrappedAdResponseDto>,
>(
  limit: string,
  page: string,
  location: string,
  params?: AdsPublicControllerFindBannerAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindBannerAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
  TError = ErrorType<WrappedAdResponseDto>,
>(
  limit: string,
  page: string,
  location: string,
  params?: AdsPublicControllerFindBannerAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get banner advertisements
 */

export function useAdsPublicControllerFindBannerAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
  TError = ErrorType<WrappedAdResponseDto>,
>(
  limit: string,
  page: string,
  location: string,
  params?: AdsPublicControllerFindBannerAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdsPublicControllerFindBannerAdsQueryOptions(
    limit,
    page,
    location,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get advertisement count by location
 */
export const adsPublicControllerFindAdCountByLocation = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<LocationAdCountRespDto[]>(
    { url: `/ads/ad-count/location`, method: "GET", signal },
    options,
  );
};

export const getAdsPublicControllerFindAdCountByLocationQueryKey = () => {
  return [`/ads/ad-count/location`] as const;
};

export const getAdsPublicControllerFindAdCountByLocationQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAdCountByLocation>>,
  TError = ErrorType<LocationAdCountRespDto[]>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof adsPublicControllerFindAdCountByLocation>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPublicControllerFindAdCountByLocationQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPublicControllerFindAdCountByLocation>>
  > = ({ signal }) =>
    adsPublicControllerFindAdCountByLocation(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPublicControllerFindAdCountByLocation>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPublicControllerFindAdCountByLocationQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerFindAdCountByLocation>>
>;
export type AdsPublicControllerFindAdCountByLocationQueryError = ErrorType<
  LocationAdCountRespDto[]
>;

export function useAdsPublicControllerFindAdCountByLocation<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAdCountByLocation>>,
  TError = ErrorType<LocationAdCountRespDto[]>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAdCountByLocation>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindAdCountByLocation>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindAdCountByLocation>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindAdCountByLocation<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAdCountByLocation>>,
  TError = ErrorType<LocationAdCountRespDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAdCountByLocation>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindAdCountByLocation>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindAdCountByLocation>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindAdCountByLocation<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAdCountByLocation>>,
  TError = ErrorType<LocationAdCountRespDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAdCountByLocation>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get advertisement count by location
 */

export function useAdsPublicControllerFindAdCountByLocation<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAdCountByLocation>>,
  TError = ErrorType<LocationAdCountRespDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAdCountByLocation>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getAdsPublicControllerFindAdCountByLocationQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get advertisement count by product type
 */
export const adsPublicControllerFindAdCountByProductType = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ProductTypeAdCountRespDto[]>(
    { url: `/ads/ad-count/product`, method: "GET", signal },
    options,
  );
};

export const getAdsPublicControllerFindAdCountByProductTypeQueryKey = () => {
  return [`/ads/ad-count/product`] as const;
};

export const getAdsPublicControllerFindAdCountByProductTypeQueryOptions = <
  TData = Awaited<
    ReturnType<typeof adsPublicControllerFindAdCountByProductType>
  >,
  TError = ErrorType<ProductTypeAdCountRespDto[]>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof adsPublicControllerFindAdCountByProductType>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPublicControllerFindAdCountByProductTypeQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPublicControllerFindAdCountByProductType>>
  > = ({ signal }) =>
    adsPublicControllerFindAdCountByProductType(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPublicControllerFindAdCountByProductType>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPublicControllerFindAdCountByProductTypeQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof adsPublicControllerFindAdCountByProductType>>
  >;
export type AdsPublicControllerFindAdCountByProductTypeQueryError = ErrorType<
  ProductTypeAdCountRespDto[]
>;

export function useAdsPublicControllerFindAdCountByProductType<
  TData = Awaited<
    ReturnType<typeof adsPublicControllerFindAdCountByProductType>
  >,
  TError = ErrorType<ProductTypeAdCountRespDto[]>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAdCountByProductType>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof adsPublicControllerFindAdCountByProductType>
          >,
          TError,
          Awaited<
            ReturnType<typeof adsPublicControllerFindAdCountByProductType>
          >
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindAdCountByProductType<
  TData = Awaited<
    ReturnType<typeof adsPublicControllerFindAdCountByProductType>
  >,
  TError = ErrorType<ProductTypeAdCountRespDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAdCountByProductType>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof adsPublicControllerFindAdCountByProductType>
          >,
          TError,
          Awaited<
            ReturnType<typeof adsPublicControllerFindAdCountByProductType>
          >
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindAdCountByProductType<
  TData = Awaited<
    ReturnType<typeof adsPublicControllerFindAdCountByProductType>
  >,
  TError = ErrorType<ProductTypeAdCountRespDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAdCountByProductType>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get advertisement count by product type
 */

export function useAdsPublicControllerFindAdCountByProductType<
  TData = Awaited<
    ReturnType<typeof adsPublicControllerFindAdCountByProductType>
  >,
  TError = ErrorType<ProductTypeAdCountRespDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAdCountByProductType>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getAdsPublicControllerFindAdCountByProductTypeQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Jump advertisement
 */
export const adsPublicControllerJump = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ScrollAdResponseDto>(
    { url: `/ads/jump`, method: "PATCH" },
    options,
  );
};

export const getAdsPublicControllerJumpMutationOptions = <
  TError = ErrorType<ScrollAdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPublicControllerJump>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPublicControllerJump>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["adsPublicControllerJump"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPublicControllerJump>>,
    void
  > = () => {
    return adsPublicControllerJump(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPublicControllerJumpMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerJump>>
>;

export type AdsPublicControllerJumpMutationError =
  ErrorType<ScrollAdResponseDto>;

/**
 * @summary Jump advertisement
 */
export const useAdsPublicControllerJump = <
  TError = ErrorType<ScrollAdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPublicControllerJump>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPublicControllerJump>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAdsPublicControllerJumpMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Request update approval for advertisement
 */
export const adsPublicControllerRequestUpdate = (
  id: string,
  updateAdvertisementDto: BodyType<UpdateAdvertisementDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    {
      url: `/ads/request-update/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateAdvertisementDto,
    },
    options,
  );
};

export const getAdsPublicControllerRequestUpdateMutationOptions = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPublicControllerRequestUpdate>>,
    TError,
    { id: string; data: BodyType<UpdateAdvertisementDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPublicControllerRequestUpdate>>,
  TError,
  { id: string; data: BodyType<UpdateAdvertisementDto> },
  TContext
> => {
  const mutationKey = ["adsPublicControllerRequestUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPublicControllerRequestUpdate>>,
    { id: string; data: BodyType<UpdateAdvertisementDto> }
  > = (props) => {
    const { id, data } = props ?? {};

    return adsPublicControllerRequestUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPublicControllerRequestUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerRequestUpdate>>
>;
export type AdsPublicControllerRequestUpdateMutationBody =
  BodyType<UpdateAdvertisementDto>;
export type AdsPublicControllerRequestUpdateMutationError =
  ErrorType<void | AdResponseDto>;

/**
 * @summary Request update approval for advertisement
 */
export const useAdsPublicControllerRequestUpdate = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPublicControllerRequestUpdate>>,
      TError,
      { id: string; data: BodyType<UpdateAdvertisementDto> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPublicControllerRequestUpdate>>,
  TError,
  { id: string; data: BodyType<UpdateAdvertisementDto> },
  TContext
> => {
  const mutationOptions =
    getAdsPublicControllerRequestUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Request date extension approval for advertisement
 */
export const adsPublicControllerRequestDateExtend = (
  id: string,
  params: AdsPublicControllerRequestDateExtendParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/request-date-extend/${id}`, method: "PATCH", params },
    options,
  );
};

export const getAdsPublicControllerRequestDateExtendMutationOptions = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPublicControllerRequestDateExtend>>,
    TError,
    { id: string; params: AdsPublicControllerRequestDateExtendParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPublicControllerRequestDateExtend>>,
  TError,
  { id: string; params: AdsPublicControllerRequestDateExtendParams },
  TContext
> => {
  const mutationKey = ["adsPublicControllerRequestDateExtend"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPublicControllerRequestDateExtend>>,
    { id: string; params: AdsPublicControllerRequestDateExtendParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return adsPublicControllerRequestDateExtend(id, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPublicControllerRequestDateExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerRequestDateExtend>>
>;

export type AdsPublicControllerRequestDateExtendMutationError =
  ErrorType<AdResponseDto>;

/**
 * @summary Request date extension approval for advertisement
 */
export const useAdsPublicControllerRequestDateExtend = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPublicControllerRequestDateExtend>>,
      TError,
      { id: string; params: AdsPublicControllerRequestDateExtendParams },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPublicControllerRequestDateExtend>>,
  TError,
  { id: string; params: AdsPublicControllerRequestDateExtendParams },
  TContext
> => {
  const mutationOptions =
    getAdsPublicControllerRequestDateExtendMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Request count extension approval for advertisement
 */
export const adsPublicControllerRequestCountExtend = (
  id: string,
  count: string,
  params: AdsPublicControllerRequestCountExtendParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    {
      url: `/ads/request-count-extend/${id}/${count}`,
      method: "PATCH",
      params,
    },
    options,
  );
};

export const getAdsPublicControllerRequestCountExtendMutationOptions = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPublicControllerRequestCountExtend>>,
    TError,
    {
      id: string;
      count: string;
      params: AdsPublicControllerRequestCountExtendParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPublicControllerRequestCountExtend>>,
  TError,
  {
    id: string;
    count: string;
    params: AdsPublicControllerRequestCountExtendParams;
  },
  TContext
> => {
  const mutationKey = ["adsPublicControllerRequestCountExtend"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPublicControllerRequestCountExtend>>,
    {
      id: string;
      count: string;
      params: AdsPublicControllerRequestCountExtendParams;
    }
  > = (props) => {
    const { id, count, params } = props ?? {};

    return adsPublicControllerRequestCountExtend(
      id,
      count,
      params,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPublicControllerRequestCountExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerRequestCountExtend>>
>;

export type AdsPublicControllerRequestCountExtendMutationError =
  ErrorType<AdResponseDto>;

/**
 * @summary Request count extension approval for advertisement
 */
export const useAdsPublicControllerRequestCountExtend = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPublicControllerRequestCountExtend>>,
      TError,
      {
        id: string;
        count: string;
        params: AdsPublicControllerRequestCountExtendParams;
      },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPublicControllerRequestCountExtend>>,
  TError,
  {
    id: string;
    count: string;
    params: AdsPublicControllerRequestCountExtendParams;
  },
  TContext
> => {
  const mutationOptions =
    getAdsPublicControllerRequestCountExtendMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete advertisement
 */
export const adsPublicControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<boolean>(
    { url: `/ads/${id}`, method: "DELETE" },
    options,
  );
};

export const getAdsPublicControllerRemoveMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPublicControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPublicControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["adsPublicControllerRemove"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPublicControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return adsPublicControllerRemove(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPublicControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerRemove>>
>;

export type AdsPublicControllerRemoveMutationError = ErrorType<unknown>;

/**
 * @summary Delete advertisement
 */
export const useAdsPublicControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPublicControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPublicControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getAdsPublicControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
