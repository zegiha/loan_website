/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Loan API
 * ÏßÄÏó≠, ÏÉÅÌíà Îì±ÏùÑ QueryÎ•º ÌÜµÌï¥ Ïó¨Îü¨ Í∞úÎ•º Î≥¥ÎÇº ÎïåÎäî ÏΩ§Îßà(,)Î°ú Íµ¨Î∂ÑÌïòÏó¨ Î≥¥ÎÇ¥Ï£ºÏÑ∏Ïöî. ÏòàÏãú: ?location=ÏÑúÏö∏,Î∂ÄÏÇ∞,ÎåÄÍµ¨
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { WrappedScrollAdResponseDto } from "../../const";

import { customInstance } from "../../../shared/axios/lib/customInstance";
import type { ErrorType } from "../../../shared/axios/lib/customInstance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const commonControllerCommonInfos = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/common`, method: "GET", signal },
    options,
  );
};

export const getCommonControllerCommonInfosQueryKey = () => {
  return [`/common`] as const;
};

export const getCommonControllerCommonInfosQueryOptions = <
  TData = Awaited<ReturnType<typeof commonControllerCommonInfos>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof commonControllerCommonInfos>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCommonControllerCommonInfosQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof commonControllerCommonInfos>>
  > = ({ signal }) => commonControllerCommonInfos(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof commonControllerCommonInfos>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CommonControllerCommonInfosQueryResult = NonNullable<
  Awaited<ReturnType<typeof commonControllerCommonInfos>>
>;
export type CommonControllerCommonInfosQueryError = ErrorType<unknown>;

export function useCommonControllerCommonInfos<
  TData = Awaited<ReturnType<typeof commonControllerCommonInfos>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof commonControllerCommonInfos>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof commonControllerCommonInfos>>,
          TError,
          Awaited<ReturnType<typeof commonControllerCommonInfos>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCommonControllerCommonInfos<
  TData = Awaited<ReturnType<typeof commonControllerCommonInfos>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof commonControllerCommonInfos>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof commonControllerCommonInfos>>,
          TError,
          Awaited<ReturnType<typeof commonControllerCommonInfos>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCommonControllerCommonInfos<
  TData = Awaited<ReturnType<typeof commonControllerCommonInfos>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof commonControllerCommonInfos>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useCommonControllerCommonInfos<
  TData = Awaited<ReturnType<typeof commonControllerCommonInfos>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof commonControllerCommonInfos>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCommonControllerCommonInfosQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const commonControllerGetVisitorCount = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/visitor-count`, method: "GET", signal },
    options,
  );
};

export const getCommonControllerGetVisitorCountQueryKey = () => {
  return [`/visitor-count`] as const;
};

export const getCommonControllerGetVisitorCountQueryOptions = <
  TData = Awaited<ReturnType<typeof commonControllerGetVisitorCount>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof commonControllerGetVisitorCount>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCommonControllerGetVisitorCountQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof commonControllerGetVisitorCount>>
  > = ({ signal }) => commonControllerGetVisitorCount(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof commonControllerGetVisitorCount>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CommonControllerGetVisitorCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof commonControllerGetVisitorCount>>
>;
export type CommonControllerGetVisitorCountQueryError = ErrorType<unknown>;

export function useCommonControllerGetVisitorCount<
  TData = Awaited<ReturnType<typeof commonControllerGetVisitorCount>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof commonControllerGetVisitorCount>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof commonControllerGetVisitorCount>>,
          TError,
          Awaited<ReturnType<typeof commonControllerGetVisitorCount>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCommonControllerGetVisitorCount<
  TData = Awaited<ReturnType<typeof commonControllerGetVisitorCount>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof commonControllerGetVisitorCount>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof commonControllerGetVisitorCount>>,
          TError,
          Awaited<ReturnType<typeof commonControllerGetVisitorCount>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCommonControllerGetVisitorCount<
  TData = Awaited<ReturnType<typeof commonControllerGetVisitorCount>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof commonControllerGetVisitorCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useCommonControllerGetVisitorCount<
  TData = Awaited<ReturnType<typeof commonControllerGetVisitorCount>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof commonControllerGetVisitorCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCommonControllerGetVisitorCountQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const commonControllerLogVisitor = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/visitor`, method: "POST", signal },
    options,
  );
};

export const getCommonControllerLogVisitorMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof commonControllerLogVisitor>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof commonControllerLogVisitor>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["commonControllerLogVisitor"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof commonControllerLogVisitor>>,
    void
  > = () => {
    return commonControllerLogVisitor(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CommonControllerLogVisitorMutationResult = NonNullable<
  Awaited<ReturnType<typeof commonControllerLogVisitor>>
>;

export type CommonControllerLogVisitorMutationError = ErrorType<unknown>;

export const useCommonControllerLogVisitor = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof commonControllerLogVisitor>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof commonControllerLogVisitor>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getCommonControllerLogVisitorMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary ÌéòÏù¥ÏßÄÎÑ§Ïù¥Ìä∏Îìú ÌöåÏÇ¨ Ï°∞Ìöå
 */
export const commonControllerPaginatedCompany = (
  page: number,
  limit: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<WrappedScrollAdResponseDto>(
    { url: `/paginated-company/${page}/${limit}`, method: "GET", signal },
    options,
  );
};

export const getCommonControllerPaginatedCompanyQueryKey = (
  page: number,
  limit: number,
) => {
  return [`/paginated-company/${page}/${limit}`] as const;
};

export const getCommonControllerPaginatedCompanyQueryOptions = <
  TData = Awaited<ReturnType<typeof commonControllerPaginatedCompany>>,
  TError = ErrorType<unknown>,
>(
  page: number,
  limit: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof commonControllerPaginatedCompany>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCommonControllerPaginatedCompanyQueryKey(page, limit);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof commonControllerPaginatedCompany>>
  > = ({ signal }) =>
    commonControllerPaginatedCompany(page, limit, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(page && limit),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof commonControllerPaginatedCompany>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CommonControllerPaginatedCompanyQueryResult = NonNullable<
  Awaited<ReturnType<typeof commonControllerPaginatedCompany>>
>;
export type CommonControllerPaginatedCompanyQueryError = ErrorType<unknown>;

export function useCommonControllerPaginatedCompany<
  TData = Awaited<ReturnType<typeof commonControllerPaginatedCompany>>,
  TError = ErrorType<unknown>,
>(
  page: number,
  limit: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof commonControllerPaginatedCompany>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof commonControllerPaginatedCompany>>,
          TError,
          Awaited<ReturnType<typeof commonControllerPaginatedCompany>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCommonControllerPaginatedCompany<
  TData = Awaited<ReturnType<typeof commonControllerPaginatedCompany>>,
  TError = ErrorType<unknown>,
>(
  page: number,
  limit: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof commonControllerPaginatedCompany>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof commonControllerPaginatedCompany>>,
          TError,
          Awaited<ReturnType<typeof commonControllerPaginatedCompany>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCommonControllerPaginatedCompany<
  TData = Awaited<ReturnType<typeof commonControllerPaginatedCompany>>,
  TError = ErrorType<unknown>,
>(
  page: number,
  limit: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof commonControllerPaginatedCompany>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÌéòÏù¥ÏßÄÎÑ§Ïù¥Ìä∏Îìú ÌöåÏÇ¨ Ï°∞Ìöå
 */

export function useCommonControllerPaginatedCompany<
  TData = Awaited<ReturnType<typeof commonControllerPaginatedCompany>>,
  TError = ErrorType<unknown>,
>(
  page: number,
  limit: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof commonControllerPaginatedCompany>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCommonControllerPaginatedCompanyQueryOptions(
    page,
    limit,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
