/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Loan API
 * ÏßÄÏó≠, ÏÉÅÌíà Îì±ÏùÑ QueryÎ•º ÌÜµÌï¥ Ïó¨Îü¨ Í∞úÎ•º Î≥¥ÎÇº ÎïåÎäî ÏΩ§Îßà(,)Î°ú Íµ¨Î∂ÑÌïòÏó¨ Î≥¥ÎÇ¥Ï£ºÏÑ∏Ïöî. ÏòàÏãú: ?location=ÏÑúÏö∏,Î∂ÄÏÇ∞,ÎåÄÍµ¨
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateLoanboardDto,
  LoanboardControllerFindAllParams,
  LoanboardResponseDto,
  PaginationResponseDto,
} from "../../const";

import { customInstance } from "../../../shared/axios/lib/customInstance";
import type {
  ErrorType,
  BodyType,
} from "../../../shared/axios/lib/customInstance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get all loan boards with pagination and filters
 */
export const loanboardControllerFindAll = (
  params?: LoanboardControllerFindAllParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PaginationResponseDto>(
    { url: `/loanboard`, method: "GET", params, signal },
    options,
  );
};

export const getLoanboardControllerFindAllQueryKey = (
  params?: LoanboardControllerFindAllParams,
) => {
  return [`/loanboard`, ...(params ? [params] : [])] as const;
};

export const getLoanboardControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof loanboardControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params?: LoanboardControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof loanboardControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getLoanboardControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof loanboardControllerFindAll>>
  > = ({ signal }) =>
    loanboardControllerFindAll(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof loanboardControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type LoanboardControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof loanboardControllerFindAll>>
>;
export type LoanboardControllerFindAllQueryError = ErrorType<unknown>;

export function useLoanboardControllerFindAll<
  TData = Awaited<ReturnType<typeof loanboardControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | LoanboardControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof loanboardControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof loanboardControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof loanboardControllerFindAll>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useLoanboardControllerFindAll<
  TData = Awaited<ReturnType<typeof loanboardControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params?: LoanboardControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof loanboardControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof loanboardControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof loanboardControllerFindAll>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useLoanboardControllerFindAll<
  TData = Awaited<ReturnType<typeof loanboardControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params?: LoanboardControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof loanboardControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all loan boards with pagination and filters
 */

export function useLoanboardControllerFindAll<
  TData = Awaited<ReturnType<typeof loanboardControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params?: LoanboardControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof loanboardControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getLoanboardControllerFindAllQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create a new loan board
 */
export const loanboardControllerCreate = (
  createLoanboardDto: BodyType<CreateLoanboardDto>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<LoanboardResponseDto>(
    {
      url: `/loanboard`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createLoanboardDto,
      signal,
    },
    options,
  );
};

export const getLoanboardControllerCreateMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof loanboardControllerCreate>>,
    TError,
    { data: BodyType<CreateLoanboardDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof loanboardControllerCreate>>,
  TError,
  { data: BodyType<CreateLoanboardDto> },
  TContext
> => {
  const mutationKey = ["loanboardControllerCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof loanboardControllerCreate>>,
    { data: BodyType<CreateLoanboardDto> }
  > = (props) => {
    const { data } = props ?? {};

    return loanboardControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoanboardControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof loanboardControllerCreate>>
>;
export type LoanboardControllerCreateMutationBody =
  BodyType<CreateLoanboardDto>;
export type LoanboardControllerCreateMutationError = ErrorType<void>;

/**
 * @summary Create a new loan board
 */
export const useLoanboardControllerCreate = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof loanboardControllerCreate>>,
      TError,
      { data: BodyType<CreateLoanboardDto> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof loanboardControllerCreate>>,
  TError,
  { data: BodyType<CreateLoanboardDto> },
  TContext
> => {
  const mutationOptions = getLoanboardControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get a loan board by ID
 */
export const loanboardControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<LoanboardResponseDto>(
    { url: `/loanboard/${id}`, method: "GET", signal },
    options,
  );
};

export const getLoanboardControllerFindOneQueryKey = (id: string) => {
  return [`/loanboard/${id}`] as const;
};

export const getLoanboardControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof loanboardControllerFindOne>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof loanboardControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getLoanboardControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof loanboardControllerFindOne>>
  > = ({ signal }) => loanboardControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof loanboardControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type LoanboardControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof loanboardControllerFindOne>>
>;
export type LoanboardControllerFindOneQueryError = ErrorType<void>;

export function useLoanboardControllerFindOne<
  TData = Awaited<ReturnType<typeof loanboardControllerFindOne>>,
  TError = ErrorType<void>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof loanboardControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof loanboardControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof loanboardControllerFindOne>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useLoanboardControllerFindOne<
  TData = Awaited<ReturnType<typeof loanboardControllerFindOne>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof loanboardControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof loanboardControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof loanboardControllerFindOne>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useLoanboardControllerFindOne<
  TData = Awaited<ReturnType<typeof loanboardControllerFindOne>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof loanboardControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a loan board by ID
 */

export function useLoanboardControllerFindOne<
  TData = Awaited<ReturnType<typeof loanboardControllerFindOne>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof loanboardControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getLoanboardControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Delete a loan board by ID
 */
export const loanboardControllerDelete = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/loanboard/${id}`, method: "DELETE" },
    options,
  );
};

export const getLoanboardControllerDeleteMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof loanboardControllerDelete>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof loanboardControllerDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["loanboardControllerDelete"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof loanboardControllerDelete>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return loanboardControllerDelete(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoanboardControllerDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof loanboardControllerDelete>>
>;

export type LoanboardControllerDeleteMutationError = ErrorType<void>;

/**
 * @summary Delete a loan board by ID
 */
export const useLoanboardControllerDelete = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof loanboardControllerDelete>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof loanboardControllerDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getLoanboardControllerDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Register available company for a loan board
 */
export const loanboardControllerRegisterAvailableCompany = (
  boardId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    {
      url: `/loanboard/register-available-company/${boardId}`,
      method: "POST",
      signal,
    },
    options,
  );
};

export const getLoanboardControllerRegisterAvailableCompanyMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof loanboardControllerRegisterAvailableCompany>>,
    TError,
    { boardId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof loanboardControllerRegisterAvailableCompany>>,
  TError,
  { boardId: string },
  TContext
> => {
  const mutationKey = ["loanboardControllerRegisterAvailableCompany"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof loanboardControllerRegisterAvailableCompany>>,
    { boardId: string }
  > = (props) => {
    const { boardId } = props ?? {};

    return loanboardControllerRegisterAvailableCompany(boardId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoanboardControllerRegisterAvailableCompanyMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof loanboardControllerRegisterAvailableCompany>>
  >;

export type LoanboardControllerRegisterAvailableCompanyMutationError =
  ErrorType<void>;

/**
 * @summary Register available company for a loan board
 */
export const useLoanboardControllerRegisterAvailableCompany = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof loanboardControllerRegisterAvailableCompany>>,
      TError,
      { boardId: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof loanboardControllerRegisterAvailableCompany>>,
  TError,
  { boardId: string },
  TContext
> => {
  const mutationOptions =
    getLoanboardControllerRegisterAvailableCompanyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
