/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Loan API
 * Loan API description
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  AdResponseDto,
  AdvertiseControllerFindAllofMyAdsParams,
  AdvertiseControllerRequestCountExtendParams,
  AdvertiseControllerRequestDateExtendParams,
  AdvertiseControllerSearchAdsParams,
  AdvertiseControllerSearchBannerAdsParams,
  AdvertiseControllerSearchLineAdsParams,
  CreateAdvertisementDto,
  UpdateAdvertisementDto,
} from "../../const";

import { customInstance } from "../../../shared/axios/lib/customInstance";
import type {
  ErrorType,
  BodyType,
} from "../../../shared/axios/lib/customInstance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Create advertisement
 */
export const advertiseControllerCreate = (
  createAdvertisementDto: BodyType<CreateAdvertisementDto>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto>(
    {
      url: `/ads`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createAdvertisementDto,
      signal,
    },
    options,
  );
};

export const getAdvertiseControllerCreateMutationOptions = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerCreate>>,
    TError,
    { data: BodyType<CreateAdvertisementDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerCreate>>,
  TError,
  { data: BodyType<CreateAdvertisementDto> },
  TContext
> => {
  const mutationKey = ["advertiseControllerCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerCreate>>,
    { data: BodyType<CreateAdvertisementDto> }
  > = (props) => {
    const { data } = props ?? {};

    return advertiseControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdvertiseControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerCreate>>
>;
export type AdvertiseControllerCreateMutationBody =
  BodyType<CreateAdvertisementDto>;
export type AdvertiseControllerCreateMutationError = ErrorType<AdResponseDto>;

/**
 * @summary Create advertisement
 */
export const useAdvertiseControllerCreate = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerCreate>>,
      TError,
      { data: BodyType<CreateAdvertisementDto> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerCreate>>,
  TError,
  { data: BodyType<CreateAdvertisementDto> },
  TContext
> => {
  const mutationOptions = getAdvertiseControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Search advertisements by location and content
 */
export const advertiseControllerSearchAds = (
  page: string,
  limit: string,
  params: AdvertiseControllerSearchAdsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    { url: `/ads/search/all/${page}/${limit}`, method: "GET", params, signal },
    options,
  );
};

export const getAdvertiseControllerSearchAdsQueryKey = (
  page: string,
  limit: string,
  params: AdvertiseControllerSearchAdsParams,
) => {
  return [
    `/ads/search/all/${page}/${limit}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getAdvertiseControllerSearchAdsQueryOptions = <
  TData = Awaited<ReturnType<typeof advertiseControllerSearchAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  params: AdvertiseControllerSearchAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerSearchAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdvertiseControllerSearchAdsQueryKey(page, limit, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof advertiseControllerSearchAds>>
  > = ({ signal }) =>
    advertiseControllerSearchAds(page, limit, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(page && limit),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof advertiseControllerSearchAds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdvertiseControllerSearchAdsQueryResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerSearchAds>>
>;
export type AdvertiseControllerSearchAdsQueryError = ErrorType<AdResponseDto[]>;

export function useAdvertiseControllerSearchAds<
  TData = Awaited<ReturnType<typeof advertiseControllerSearchAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  params: AdvertiseControllerSearchAdsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerSearchAds>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerSearchAds>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerSearchAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerSearchAds<
  TData = Awaited<ReturnType<typeof advertiseControllerSearchAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  params: AdvertiseControllerSearchAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerSearchAds>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerSearchAds>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerSearchAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerSearchAds<
  TData = Awaited<ReturnType<typeof advertiseControllerSearchAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  params: AdvertiseControllerSearchAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerSearchAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Search advertisements by location and content
 */

export function useAdvertiseControllerSearchAds<
  TData = Awaited<ReturnType<typeof advertiseControllerSearchAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  params: AdvertiseControllerSearchAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerSearchAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdvertiseControllerSearchAdsQueryOptions(
    page,
    limit,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Search line advertisements by location and content
 */
export const advertiseControllerSearchLineAds = (
  page: string,
  limit: string,
  params: AdvertiseControllerSearchLineAdsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    { url: `/ads/search/line/${page}/${limit}`, method: "GET", params, signal },
    options,
  );
};

export const getAdvertiseControllerSearchLineAdsQueryKey = (
  page: string,
  limit: string,
  params: AdvertiseControllerSearchLineAdsParams,
) => {
  return [
    `/ads/search/line/${page}/${limit}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getAdvertiseControllerSearchLineAdsQueryOptions = <
  TData = Awaited<ReturnType<typeof advertiseControllerSearchLineAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  params: AdvertiseControllerSearchLineAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerSearchLineAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdvertiseControllerSearchLineAdsQueryKey(page, limit, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof advertiseControllerSearchLineAds>>
  > = ({ signal }) =>
    advertiseControllerSearchLineAds(
      page,
      limit,
      params,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(page && limit),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof advertiseControllerSearchLineAds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdvertiseControllerSearchLineAdsQueryResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerSearchLineAds>>
>;
export type AdvertiseControllerSearchLineAdsQueryError = ErrorType<
  AdResponseDto[]
>;

export function useAdvertiseControllerSearchLineAds<
  TData = Awaited<ReturnType<typeof advertiseControllerSearchLineAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  params: AdvertiseControllerSearchLineAdsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerSearchLineAds>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerSearchLineAds>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerSearchLineAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerSearchLineAds<
  TData = Awaited<ReturnType<typeof advertiseControllerSearchLineAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  params: AdvertiseControllerSearchLineAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerSearchLineAds>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerSearchLineAds>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerSearchLineAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerSearchLineAds<
  TData = Awaited<ReturnType<typeof advertiseControllerSearchLineAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  params: AdvertiseControllerSearchLineAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerSearchLineAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Search line advertisements by location and content
 */

export function useAdvertiseControllerSearchLineAds<
  TData = Awaited<ReturnType<typeof advertiseControllerSearchLineAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  params: AdvertiseControllerSearchLineAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerSearchLineAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdvertiseControllerSearchLineAdsQueryOptions(
    page,
    limit,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Search banner advertisements by location and content
 */
export const advertiseControllerSearchBannerAds = (
  page: string,
  limit: string,
  params: AdvertiseControllerSearchBannerAdsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    {
      url: `/ads/search/banner/${page}/${limit}`,
      method: "GET",
      params,
      signal,
    },
    options,
  );
};

export const getAdvertiseControllerSearchBannerAdsQueryKey = (
  page: string,
  limit: string,
  params: AdvertiseControllerSearchBannerAdsParams,
) => {
  return [
    `/ads/search/banner/${page}/${limit}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getAdvertiseControllerSearchBannerAdsQueryOptions = <
  TData = Awaited<ReturnType<typeof advertiseControllerSearchBannerAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  params: AdvertiseControllerSearchBannerAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerSearchBannerAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdvertiseControllerSearchBannerAdsQueryKey(page, limit, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof advertiseControllerSearchBannerAds>>
  > = ({ signal }) =>
    advertiseControllerSearchBannerAds(
      page,
      limit,
      params,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(page && limit),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof advertiseControllerSearchBannerAds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdvertiseControllerSearchBannerAdsQueryResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerSearchBannerAds>>
>;
export type AdvertiseControllerSearchBannerAdsQueryError = ErrorType<
  AdResponseDto[]
>;

export function useAdvertiseControllerSearchBannerAds<
  TData = Awaited<ReturnType<typeof advertiseControllerSearchBannerAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  params: AdvertiseControllerSearchBannerAdsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerSearchBannerAds>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerSearchBannerAds>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerSearchBannerAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerSearchBannerAds<
  TData = Awaited<ReturnType<typeof advertiseControllerSearchBannerAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  params: AdvertiseControllerSearchBannerAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerSearchBannerAds>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerSearchBannerAds>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerSearchBannerAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerSearchBannerAds<
  TData = Awaited<ReturnType<typeof advertiseControllerSearchBannerAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  params: AdvertiseControllerSearchBannerAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerSearchBannerAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Search banner advertisements by location and content
 */

export function useAdvertiseControllerSearchBannerAds<
  TData = Awaited<ReturnType<typeof advertiseControllerSearchBannerAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  params: AdvertiseControllerSearchBannerAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerSearchBannerAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdvertiseControllerSearchBannerAdsQueryOptions(
    page,
    limit,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all advertisements
 */
export const advertiseControllerFindAll = (
  page: string,
  limit: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    { url: `/ads/all/${page}/${limit}`, method: "GET", signal },
    options,
  );
};

export const getAdvertiseControllerFindAllQueryKey = (
  page: string,
  limit: string,
) => {
  return [`/ads/all/${page}/${limit}`] as const;
};

export const getAdvertiseControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof advertiseControllerFindAll>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdvertiseControllerFindAllQueryKey(page, limit);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof advertiseControllerFindAll>>
  > = ({ signal }) =>
    advertiseControllerFindAll(page, limit, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(page && limit),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof advertiseControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdvertiseControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerFindAll>>
>;
export type AdvertiseControllerFindAllQueryError = ErrorType<AdResponseDto[]>;

export function useAdvertiseControllerFindAll<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAll>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindAll>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerFindAll<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAll>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindAll>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerFindAll<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAll>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all advertisements
 */

export function useAdvertiseControllerFindAll<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAll>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdvertiseControllerFindAllQueryOptions(
    page,
    limit,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all of my advertisements
 */
export const advertiseControllerFindAllofMyAds = (
  page: string,
  limit: string,
  params: AdvertiseControllerFindAllofMyAdsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    { url: `/ads/my/${page}/${limit}`, method: "GET", params, signal },
    options,
  );
};

export const getAdvertiseControllerFindAllofMyAdsQueryKey = (
  page: string,
  limit: string,
  params: AdvertiseControllerFindAllofMyAdsParams,
) => {
  return [`/ads/my/${page}/${limit}`, ...(params ? [params] : [])] as const;
};

export const getAdvertiseControllerFindAllofMyAdsQueryOptions = <
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  params: AdvertiseControllerFindAllofMyAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdvertiseControllerFindAllofMyAdsQueryKey(page, limit, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>
  > = ({ signal }) =>
    advertiseControllerFindAllofMyAds(
      page,
      limit,
      params,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(page && limit),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdvertiseControllerFindAllofMyAdsQueryResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>
>;
export type AdvertiseControllerFindAllofMyAdsQueryError = ErrorType<
  AdResponseDto[]
>;

export function useAdvertiseControllerFindAllofMyAds<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  params: AdvertiseControllerFindAllofMyAdsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerFindAllofMyAds<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  params: AdvertiseControllerFindAllofMyAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerFindAllofMyAds<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  params: AdvertiseControllerFindAllofMyAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of my advertisements
 */

export function useAdvertiseControllerFindAllofMyAds<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  params: AdvertiseControllerFindAllofMyAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdvertiseControllerFindAllofMyAdsQueryOptions(
    page,
    limit,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get advertisement by ID
 */
export const advertiseControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/id/${id}`, method: "GET", signal },
    options,
  );
};

export const getAdvertiseControllerFindOneQueryKey = (id: string) => {
  return [`/ads/id/${id}`] as const;
};

export const getAdvertiseControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof advertiseControllerFindOne>>,
  TError = ErrorType<void | AdResponseDto>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdvertiseControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof advertiseControllerFindOne>>
  > = ({ signal }) => advertiseControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof advertiseControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdvertiseControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerFindOne>>
>;
export type AdvertiseControllerFindOneQueryError =
  ErrorType<void | AdResponseDto>;

export function useAdvertiseControllerFindOne<
  TData = Awaited<ReturnType<typeof advertiseControllerFindOne>>,
  TError = ErrorType<void | AdResponseDto>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindOne>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerFindOne<
  TData = Awaited<ReturnType<typeof advertiseControllerFindOne>>,
  TError = ErrorType<void | AdResponseDto>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindOne>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerFindOne<
  TData = Awaited<ReturnType<typeof advertiseControllerFindOne>>,
  TError = ErrorType<void | AdResponseDto>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get advertisement by ID
 */

export function useAdvertiseControllerFindOne<
  TData = Awaited<ReturnType<typeof advertiseControllerFindOne>>,
  TError = ErrorType<void | AdResponseDto>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdvertiseControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get random advertisements
 */
export const advertiseControllerFindRandom = (
  page: string,
  limit: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    { url: `/ads/random/${page}/${limit}`, method: "GET", signal },
    options,
  );
};

export const getAdvertiseControllerFindRandomQueryKey = (
  page: string,
  limit: string,
) => {
  return [`/ads/random/${page}/${limit}`] as const;
};

export const getAdvertiseControllerFindRandomQueryOptions = <
  TData = Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdvertiseControllerFindRandomQueryKey(page, limit);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof advertiseControllerFindRandom>>
  > = ({ signal }) =>
    advertiseControllerFindRandom(page, limit, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(page && limit),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdvertiseControllerFindRandomQueryResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerFindRandom>>
>;
export type AdvertiseControllerFindRandomQueryError = ErrorType<
  AdResponseDto[]
>;

export function useAdvertiseControllerFindRandom<
  TData = Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindRandom>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerFindRandom<
  TData = Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindRandom>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerFindRandom<
  TData = Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get random advertisements
 */

export function useAdvertiseControllerFindRandom<
  TData = Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdvertiseControllerFindRandomQueryOptions(
    page,
    limit,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get line advertisements
 */
export const advertiseControllerFindLineAds = (
  page: string,
  limit: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    { url: `/ads/line-ads/${page}/${limit}`, method: "GET", signal },
    options,
  );
};

export const getAdvertiseControllerFindLineAdsQueryKey = (
  page: string,
  limit: string,
) => {
  return [`/ads/line-ads/${page}/${limit}`] as const;
};

export const getAdvertiseControllerFindLineAdsQueryOptions = <
  TData = Awaited<ReturnType<typeof advertiseControllerFindLineAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindLineAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdvertiseControllerFindLineAdsQueryKey(page, limit);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof advertiseControllerFindLineAds>>
  > = ({ signal }) =>
    advertiseControllerFindLineAds(page, limit, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(page && limit),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof advertiseControllerFindLineAds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdvertiseControllerFindLineAdsQueryResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerFindLineAds>>
>;
export type AdvertiseControllerFindLineAdsQueryError = ErrorType<
  AdResponseDto[]
>;

export function useAdvertiseControllerFindLineAds<
  TData = Awaited<ReturnType<typeof advertiseControllerFindLineAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindLineAds>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindLineAds>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindLineAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerFindLineAds<
  TData = Awaited<ReturnType<typeof advertiseControllerFindLineAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindLineAds>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindLineAds>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindLineAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerFindLineAds<
  TData = Awaited<ReturnType<typeof advertiseControllerFindLineAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindLineAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get line advertisements
 */

export function useAdvertiseControllerFindLineAds<
  TData = Awaited<ReturnType<typeof advertiseControllerFindLineAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindLineAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdvertiseControllerFindLineAdsQueryOptions(
    page,
    limit,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get banner advertisements
 */
export const advertiseControllerFindBannerAds = (
  page: string,
  limit: string,
  location: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    {
      url: `/ads/banner-ads/${page}/${limit}/${location}`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getAdvertiseControllerFindBannerAdsQueryKey = (
  page: string,
  limit: string,
  location: string,
) => {
  return [`/ads/banner-ads/${page}/${limit}/${location}`] as const;
};

export const getAdvertiseControllerFindBannerAdsQueryOptions = <
  TData = Awaited<ReturnType<typeof advertiseControllerFindBannerAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  location: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindBannerAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdvertiseControllerFindBannerAdsQueryKey(page, limit, location);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof advertiseControllerFindBannerAds>>
  > = ({ signal }) =>
    advertiseControllerFindBannerAds(
      page,
      limit,
      location,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(page && limit && location),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof advertiseControllerFindBannerAds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdvertiseControllerFindBannerAdsQueryResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerFindBannerAds>>
>;
export type AdvertiseControllerFindBannerAdsQueryError = ErrorType<
  AdResponseDto[]
>;

export function useAdvertiseControllerFindBannerAds<
  TData = Awaited<ReturnType<typeof advertiseControllerFindBannerAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  location: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindBannerAds>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindBannerAds>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindBannerAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerFindBannerAds<
  TData = Awaited<ReturnType<typeof advertiseControllerFindBannerAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  location: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindBannerAds>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindBannerAds>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindBannerAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerFindBannerAds<
  TData = Awaited<ReturnType<typeof advertiseControllerFindBannerAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  location: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindBannerAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get banner advertisements
 */

export function useAdvertiseControllerFindBannerAds<
  TData = Awaited<ReturnType<typeof advertiseControllerFindBannerAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  location: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindBannerAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdvertiseControllerFindBannerAdsQueryOptions(
    page,
    limit,
    location,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Delete advertisement
 */
export const advertiseControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<boolean>(
    { url: `/ads/${id}`, method: "DELETE" },
    options,
  );
};

export const getAdvertiseControllerRemoveMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["advertiseControllerRemove"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return advertiseControllerRemove(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdvertiseControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerRemove>>
>;

export type AdvertiseControllerRemoveMutationError = ErrorType<unknown>;

/**
 * @summary Delete advertisement
 */
export const useAdvertiseControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getAdvertiseControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Approve advertisement registration
 */
export const advertiseControllerApprove = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/approve/registration/${id}`, method: "PATCH" },
    options,
  );
};

export const getAdvertiseControllerApproveMutationOptions = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerApprove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerApprove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["advertiseControllerApprove"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerApprove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return advertiseControllerApprove(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdvertiseControllerApproveMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerApprove>>
>;

export type AdvertiseControllerApproveMutationError = ErrorType<AdResponseDto>;

/**
 * @summary Approve advertisement registration
 */
export const useAdvertiseControllerApprove = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerApprove>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerApprove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getAdvertiseControllerApproveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Reject advertisement registration
 */
export const advertiseControllerReject = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/reject/registration/${id}`, method: "PATCH" },
    options,
  );
};

export const getAdvertiseControllerRejectMutationOptions = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerReject>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerReject>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["advertiseControllerReject"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerReject>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return advertiseControllerReject(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdvertiseControllerRejectMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerReject>>
>;

export type AdvertiseControllerRejectMutationError = ErrorType<AdResponseDto>;

/**
 * @summary Reject advertisement registration
 */
export const useAdvertiseControllerReject = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerReject>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerReject>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getAdvertiseControllerRejectMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get all advertisements waiting for approval
 */
export const advertiseControllerFindAllWaitingApproval = (
  page: string,
  limit: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    {
      url: `/ads/waiting-approval/all/${page}/${limit}`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getAdvertiseControllerFindAllWaitingApprovalQueryKey = (
  page: string,
  limit: string,
) => {
  return [`/ads/waiting-approval/all/${page}/${limit}`] as const;
};

export const getAdvertiseControllerFindAllWaitingApprovalQueryOptions = <
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllWaitingApproval>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllWaitingApproval>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdvertiseControllerFindAllWaitingApprovalQueryKey(page, limit);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof advertiseControllerFindAllWaitingApproval>>
  > = ({ signal }) =>
    advertiseControllerFindAllWaitingApproval(
      page,
      limit,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(page && limit),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof advertiseControllerFindAllWaitingApproval>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdvertiseControllerFindAllWaitingApprovalQueryResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerFindAllWaitingApproval>>
>;
export type AdvertiseControllerFindAllWaitingApprovalQueryError = ErrorType<
  void | AdResponseDto[]
>;

export function useAdvertiseControllerFindAllWaitingApproval<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllWaitingApproval>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllWaitingApproval>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindAllWaitingApproval>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindAllWaitingApproval>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerFindAllWaitingApproval<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllWaitingApproval>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllWaitingApproval>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindAllWaitingApproval>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindAllWaitingApproval>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerFindAllWaitingApproval<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllWaitingApproval>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllWaitingApproval>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all advertisements waiting for approval
 */

export function useAdvertiseControllerFindAllWaitingApproval<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllWaitingApproval>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllWaitingApproval>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdvertiseControllerFindAllWaitingApprovalQueryOptions(
    page,
    limit,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get advertisement waiting for approval by ID
 */
export const advertiseControllerFindOneWaitingApproval = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/waiting-approval/${id}`, method: "GET", signal },
    options,
  );
};

export const getAdvertiseControllerFindOneWaitingApprovalQueryKey = (
  id: string,
) => {
  return [`/ads/waiting-approval/${id}`] as const;
};

export const getAdvertiseControllerFindOneWaitingApprovalQueryOptions = <
  TData = Awaited<ReturnType<typeof advertiseControllerFindOneWaitingApproval>>,
  TError = ErrorType<AdResponseDto>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindOneWaitingApproval>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdvertiseControllerFindOneWaitingApprovalQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof advertiseControllerFindOneWaitingApproval>>
  > = ({ signal }) =>
    advertiseControllerFindOneWaitingApproval(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof advertiseControllerFindOneWaitingApproval>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdvertiseControllerFindOneWaitingApprovalQueryResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerFindOneWaitingApproval>>
>;
export type AdvertiseControllerFindOneWaitingApprovalQueryError =
  ErrorType<AdResponseDto>;

export function useAdvertiseControllerFindOneWaitingApproval<
  TData = Awaited<ReturnType<typeof advertiseControllerFindOneWaitingApproval>>,
  TError = ErrorType<AdResponseDto>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindOneWaitingApproval>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindOneWaitingApproval>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindOneWaitingApproval>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerFindOneWaitingApproval<
  TData = Awaited<ReturnType<typeof advertiseControllerFindOneWaitingApproval>>,
  TError = ErrorType<AdResponseDto>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindOneWaitingApproval>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindOneWaitingApproval>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindOneWaitingApproval>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerFindOneWaitingApproval<
  TData = Awaited<ReturnType<typeof advertiseControllerFindOneWaitingApproval>>,
  TError = ErrorType<AdResponseDto>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindOneWaitingApproval>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get advertisement waiting for approval by ID
 */

export function useAdvertiseControllerFindOneWaitingApproval<
  TData = Awaited<ReturnType<typeof advertiseControllerFindOneWaitingApproval>>,
  TError = ErrorType<AdResponseDto>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindOneWaitingApproval>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdvertiseControllerFindOneWaitingApprovalQueryOptions(
    id,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all advertisements waiting for registration
 */
export const advertiseControllerFindAllWaitingRegistration = (
  page: string,
  limit: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    {
      url: `/ads/waiting-approval/register/${page}/${limit}`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getAdvertiseControllerFindAllWaitingRegistrationQueryKey = (
  page: string,
  limit: string,
) => {
  return [`/ads/waiting-approval/register/${page}/${limit}`] as const;
};

export const getAdvertiseControllerFindAllWaitingRegistrationQueryOptions = <
  TData = Awaited<
    ReturnType<typeof advertiseControllerFindAllWaitingRegistration>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof advertiseControllerFindAllWaitingRegistration>
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdvertiseControllerFindAllWaitingRegistrationQueryKey(page, limit);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof advertiseControllerFindAllWaitingRegistration>>
  > = ({ signal }) =>
    advertiseControllerFindAllWaitingRegistration(
      page,
      limit,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(page && limit),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof advertiseControllerFindAllWaitingRegistration>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdvertiseControllerFindAllWaitingRegistrationQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof advertiseControllerFindAllWaitingRegistration>>
  >;
export type AdvertiseControllerFindAllWaitingRegistrationQueryError = ErrorType<
  void | AdResponseDto[]
>;

export function useAdvertiseControllerFindAllWaitingRegistration<
  TData = Awaited<
    ReturnType<typeof advertiseControllerFindAllWaitingRegistration>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof advertiseControllerFindAllWaitingRegistration>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof advertiseControllerFindAllWaitingRegistration>
          >,
          TError,
          Awaited<
            ReturnType<typeof advertiseControllerFindAllWaitingRegistration>
          >
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerFindAllWaitingRegistration<
  TData = Awaited<
    ReturnType<typeof advertiseControllerFindAllWaitingRegistration>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof advertiseControllerFindAllWaitingRegistration>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof advertiseControllerFindAllWaitingRegistration>
          >,
          TError,
          Awaited<
            ReturnType<typeof advertiseControllerFindAllWaitingRegistration>
          >
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerFindAllWaitingRegistration<
  TData = Awaited<
    ReturnType<typeof advertiseControllerFindAllWaitingRegistration>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof advertiseControllerFindAllWaitingRegistration>
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all advertisements waiting for registration
 */

export function useAdvertiseControllerFindAllWaitingRegistration<
  TData = Awaited<
    ReturnType<typeof advertiseControllerFindAllWaitingRegistration>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof advertiseControllerFindAllWaitingRegistration>
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getAdvertiseControllerFindAllWaitingRegistrationQueryOptions(
      page,
      limit,
      options,
    );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all advertisements waiting for update
 */
export const advertiseControllerFindAllWaitingUpdate = (
  page: string,
  limit: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    {
      url: `/ads/waiting-approval/update/${page}/${limit}`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getAdvertiseControllerFindAllWaitingUpdateQueryKey = (
  page: string,
  limit: string,
) => {
  return [`/ads/waiting-approval/update/${page}/${limit}`] as const;
};

export const getAdvertiseControllerFindAllWaitingUpdateQueryOptions = <
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllWaitingUpdate>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllWaitingUpdate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdvertiseControllerFindAllWaitingUpdateQueryKey(page, limit);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof advertiseControllerFindAllWaitingUpdate>>
  > = ({ signal }) =>
    advertiseControllerFindAllWaitingUpdate(
      page,
      limit,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(page && limit),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof advertiseControllerFindAllWaitingUpdate>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdvertiseControllerFindAllWaitingUpdateQueryResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerFindAllWaitingUpdate>>
>;
export type AdvertiseControllerFindAllWaitingUpdateQueryError = ErrorType<
  void | AdResponseDto[]
>;

export function useAdvertiseControllerFindAllWaitingUpdate<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllWaitingUpdate>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllWaitingUpdate>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindAllWaitingUpdate>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindAllWaitingUpdate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerFindAllWaitingUpdate<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllWaitingUpdate>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllWaitingUpdate>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindAllWaitingUpdate>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindAllWaitingUpdate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerFindAllWaitingUpdate<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllWaitingUpdate>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllWaitingUpdate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all advertisements waiting for update
 */

export function useAdvertiseControllerFindAllWaitingUpdate<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllWaitingUpdate>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllWaitingUpdate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdvertiseControllerFindAllWaitingUpdateQueryOptions(
    page,
    limit,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all advertisements waiting for extend
 */
export const advertiseControllerFindAllWaitingExtend = (
  page: string,
  limit: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    {
      url: `/ads/waiting-approval/extend/${page}/${limit}`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getAdvertiseControllerFindAllWaitingExtendQueryKey = (
  page: string,
  limit: string,
) => {
  return [`/ads/waiting-approval/extend/${page}/${limit}`] as const;
};

export const getAdvertiseControllerFindAllWaitingExtendQueryOptions = <
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllWaitingExtend>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllWaitingExtend>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdvertiseControllerFindAllWaitingExtendQueryKey(page, limit);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof advertiseControllerFindAllWaitingExtend>>
  > = ({ signal }) =>
    advertiseControllerFindAllWaitingExtend(
      page,
      limit,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(page && limit),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof advertiseControllerFindAllWaitingExtend>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdvertiseControllerFindAllWaitingExtendQueryResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerFindAllWaitingExtend>>
>;
export type AdvertiseControllerFindAllWaitingExtendQueryError = ErrorType<
  void | AdResponseDto[]
>;

export function useAdvertiseControllerFindAllWaitingExtend<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllWaitingExtend>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllWaitingExtend>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindAllWaitingExtend>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindAllWaitingExtend>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerFindAllWaitingExtend<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllWaitingExtend>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllWaitingExtend>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindAllWaitingExtend>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindAllWaitingExtend>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdvertiseControllerFindAllWaitingExtend<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllWaitingExtend>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllWaitingExtend>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all advertisements waiting for extend
 */

export function useAdvertiseControllerFindAllWaitingExtend<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllWaitingExtend>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllWaitingExtend>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdvertiseControllerFindAllWaitingExtendQueryOptions(
    page,
    limit,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Request date extension approval for advertisement
 */
export const advertiseControllerRequestDateExtend = (
  id: string,
  params: AdvertiseControllerRequestDateExtendParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/request-date-extend/${id}`, method: "PATCH", params },
    options,
  );
};

export const getAdvertiseControllerRequestDateExtendMutationOptions = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerRequestDateExtend>>,
    TError,
    { id: string; params: AdvertiseControllerRequestDateExtendParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerRequestDateExtend>>,
  TError,
  { id: string; params: AdvertiseControllerRequestDateExtendParams },
  TContext
> => {
  const mutationKey = ["advertiseControllerRequestDateExtend"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerRequestDateExtend>>,
    { id: string; params: AdvertiseControllerRequestDateExtendParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return advertiseControllerRequestDateExtend(id, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdvertiseControllerRequestDateExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerRequestDateExtend>>
>;

export type AdvertiseControllerRequestDateExtendMutationError =
  ErrorType<AdResponseDto>;

/**
 * @summary Request date extension approval for advertisement
 */
export const useAdvertiseControllerRequestDateExtend = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerRequestDateExtend>>,
      TError,
      { id: string; params: AdvertiseControllerRequestDateExtendParams },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerRequestDateExtend>>,
  TError,
  { id: string; params: AdvertiseControllerRequestDateExtendParams },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerRequestDateExtendMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Request count extension approval for advertisement
 */
export const advertiseControllerRequestCountExtend = (
  id: string,
  count: string,
  params: AdvertiseControllerRequestCountExtendParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    {
      url: `/ads/request-count-extend/${id}/${count}`,
      method: "PATCH",
      params,
    },
    options,
  );
};

export const getAdvertiseControllerRequestCountExtendMutationOptions = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerRequestCountExtend>>,
    TError,
    {
      id: string;
      count: string;
      params: AdvertiseControllerRequestCountExtendParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerRequestCountExtend>>,
  TError,
  {
    id: string;
    count: string;
    params: AdvertiseControllerRequestCountExtendParams;
  },
  TContext
> => {
  const mutationKey = ["advertiseControllerRequestCountExtend"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerRequestCountExtend>>,
    {
      id: string;
      count: string;
      params: AdvertiseControllerRequestCountExtendParams;
    }
  > = (props) => {
    const { id, count, params } = props ?? {};

    return advertiseControllerRequestCountExtend(
      id,
      count,
      params,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type AdvertiseControllerRequestCountExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerRequestCountExtend>>
>;

export type AdvertiseControllerRequestCountExtendMutationError =
  ErrorType<AdResponseDto>;

/**
 * @summary Request count extension approval for advertisement
 */
export const useAdvertiseControllerRequestCountExtend = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerRequestCountExtend>>,
      TError,
      {
        id: string;
        count: string;
        params: AdvertiseControllerRequestCountExtendParams;
      },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerRequestCountExtend>>,
  TError,
  {
    id: string;
    count: string;
    params: AdvertiseControllerRequestCountExtendParams;
  },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerRequestCountExtendMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Approve date extension for advertisement
 */
export const advertiseControllerApproveDateExtend = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/approve-date-extend/${id}`, method: "PATCH" },
    options,
  );
};

export const getAdvertiseControllerApproveDateExtendMutationOptions = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerApproveDateExtend>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerApproveDateExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["advertiseControllerApproveDateExtend"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerApproveDateExtend>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return advertiseControllerApproveDateExtend(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdvertiseControllerApproveDateExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerApproveDateExtend>>
>;

export type AdvertiseControllerApproveDateExtendMutationError =
  ErrorType<void | AdResponseDto>;

/**
 * @summary Approve date extension for advertisement
 */
export const useAdvertiseControllerApproveDateExtend = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerApproveDateExtend>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerApproveDateExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerApproveDateExtendMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Approve count extension for advertisement
 */
export const advertiseControllerApproveCountExtend = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/approve-count-extend/${id}`, method: "PATCH" },
    options,
  );
};

export const getAdvertiseControllerApproveCountExtendMutationOptions = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerApproveCountExtend>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerApproveCountExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["advertiseControllerApproveCountExtend"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerApproveCountExtend>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return advertiseControllerApproveCountExtend(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdvertiseControllerApproveCountExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerApproveCountExtend>>
>;

export type AdvertiseControllerApproveCountExtendMutationError =
  ErrorType<void | AdResponseDto>;

/**
 * @summary Approve count extension for advertisement
 */
export const useAdvertiseControllerApproveCountExtend = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerApproveCountExtend>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerApproveCountExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerApproveCountExtendMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Reject date extension for advertisement
 */
export const advertiseControllerRejectDateExtend = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/reject-date-extend/${id}`, method: "PATCH" },
    options,
  );
};

export const getAdvertiseControllerRejectDateExtendMutationOptions = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerRejectDateExtend>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerRejectDateExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["advertiseControllerRejectDateExtend"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerRejectDateExtend>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return advertiseControllerRejectDateExtend(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdvertiseControllerRejectDateExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerRejectDateExtend>>
>;

export type AdvertiseControllerRejectDateExtendMutationError =
  ErrorType<void | AdResponseDto>;

/**
 * @summary Reject date extension for advertisement
 */
export const useAdvertiseControllerRejectDateExtend = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerRejectDateExtend>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerRejectDateExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerRejectDateExtendMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Reject count extension for advertisement
 */
export const advertiseControllerRejectCountExtend = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/reject-count-extend/${id}`, method: "PATCH" },
    options,
  );
};

export const getAdvertiseControllerRejectCountExtendMutationOptions = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerRejectCountExtend>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerRejectCountExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["advertiseControllerRejectCountExtend"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerRejectCountExtend>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return advertiseControllerRejectCountExtend(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdvertiseControllerRejectCountExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerRejectCountExtend>>
>;

export type AdvertiseControllerRejectCountExtendMutationError =
  ErrorType<void | AdResponseDto>;

/**
 * @summary Reject count extension for advertisement
 */
export const useAdvertiseControllerRejectCountExtend = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerRejectCountExtend>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerRejectCountExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerRejectCountExtendMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Request update approval for advertisement
 */
export const advertiseControllerRequestUpdate = (
  id: string,
  updateAdvertisementDto: BodyType<UpdateAdvertisementDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    {
      url: `/ads/request-update/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateAdvertisementDto,
    },
    options,
  );
};

export const getAdvertiseControllerRequestUpdateMutationOptions = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerRequestUpdate>>,
    TError,
    { id: string; data: BodyType<UpdateAdvertisementDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerRequestUpdate>>,
  TError,
  { id: string; data: BodyType<UpdateAdvertisementDto> },
  TContext
> => {
  const mutationKey = ["advertiseControllerRequestUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerRequestUpdate>>,
    { id: string; data: BodyType<UpdateAdvertisementDto> }
  > = (props) => {
    const { id, data } = props ?? {};

    return advertiseControllerRequestUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdvertiseControllerRequestUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerRequestUpdate>>
>;
export type AdvertiseControllerRequestUpdateMutationBody =
  BodyType<UpdateAdvertisementDto>;
export type AdvertiseControllerRequestUpdateMutationError =
  ErrorType<void | AdResponseDto>;

/**
 * @summary Request update approval for advertisement
 */
export const useAdvertiseControllerRequestUpdate = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerRequestUpdate>>,
      TError,
      { id: string; data: BodyType<UpdateAdvertisementDto> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerRequestUpdate>>,
  TError,
  { id: string; data: BodyType<UpdateAdvertisementDto> },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerRequestUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Approve advertisement update
 */
export const advertiseControllerApproveUpdate = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/approve-update/${id}`, method: "PATCH" },
    options,
  );
};

export const getAdvertiseControllerApproveUpdateMutationOptions = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerApproveUpdate>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerApproveUpdate>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["advertiseControllerApproveUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerApproveUpdate>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return advertiseControllerApproveUpdate(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdvertiseControllerApproveUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerApproveUpdate>>
>;

export type AdvertiseControllerApproveUpdateMutationError =
  ErrorType<void | AdResponseDto>;

/**
 * @summary Approve advertisement update
 */
export const useAdvertiseControllerApproveUpdate = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerApproveUpdate>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerApproveUpdate>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerApproveUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Reject advertisement update
 */
export const advertiseControllerRejectUpdate = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/reject-update/${id}`, method: "PATCH" },
    options,
  );
};

export const getAdvertiseControllerRejectUpdateMutationOptions = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerRejectUpdate>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerRejectUpdate>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["advertiseControllerRejectUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerRejectUpdate>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return advertiseControllerRejectUpdate(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdvertiseControllerRejectUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerRejectUpdate>>
>;

export type AdvertiseControllerRejectUpdateMutationError =
  ErrorType<void | AdResponseDto>;

/**
 * @summary Reject advertisement update
 */
export const useAdvertiseControllerRejectUpdate = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerRejectUpdate>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerRejectUpdate>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerRejectUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
