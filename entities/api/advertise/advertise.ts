/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Loan API
 * Loan API description
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  AdResponseDto,
  AdsPublicControllerRequestCountExtendParams,
  AdsPublicControllerRequestDateExtendParams,
  AdsPublicControllerSearchAdsParams,
  CreateAdvertisementDto,
  UpdateAdvertisementDto,
} from "../../const";

import { customInstance } from "../../../shared/axios/lib/customInstance";
import type {
  ErrorType,
  BodyType,
} from "../../../shared/axios/lib/customInstance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Create advertisement
 */
export const adsPublicControllerCreate = (
  createAdvertisementDto: BodyType<CreateAdvertisementDto[]>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    {
      url: `/ads`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createAdvertisementDto,
      signal,
    },
    options,
  );
};

export const getAdsPublicControllerCreateMutationOptions = <
  TError = ErrorType<AdResponseDto[]>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPublicControllerCreate>>,
    TError,
    { data: BodyType<CreateAdvertisementDto[]> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPublicControllerCreate>>,
  TError,
  { data: BodyType<CreateAdvertisementDto[]> },
  TContext
> => {
  const mutationKey = ["adsPublicControllerCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPublicControllerCreate>>,
    { data: BodyType<CreateAdvertisementDto[]> }
  > = (props) => {
    const { data } = props ?? {};

    return adsPublicControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPublicControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerCreate>>
>;
export type AdsPublicControllerCreateMutationBody = BodyType<
  CreateAdvertisementDto[]
>;
export type AdsPublicControllerCreateMutationError = ErrorType<AdResponseDto[]>;

/**
 * @summary Create advertisement
 */
export const useAdsPublicControllerCreate = <
  TError = ErrorType<AdResponseDto[]>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPublicControllerCreate>>,
      TError,
      { data: BodyType<CreateAdvertisementDto[]> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPublicControllerCreate>>,
  TError,
  { data: BodyType<CreateAdvertisementDto[]> },
  TContext
> => {
  const mutationOptions = getAdsPublicControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Search advertisements by type
 */
export const adsPublicControllerSearchAds = (
  type: string,
  page: string,
  limit: string,
  params: AdsPublicControllerSearchAdsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    {
      url: `/ads/search/${type}/${page}/${limit}`,
      method: "GET",
      params,
      signal,
    },
    options,
  );
};

export const getAdsPublicControllerSearchAdsQueryKey = (
  type: string,
  page: string,
  limit: string,
  params: AdsPublicControllerSearchAdsParams,
) => {
  return [
    `/ads/search/${type}/${page}/${limit}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getAdsPublicControllerSearchAdsQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  type: string,
  page: string,
  limit: string,
  params: AdsPublicControllerSearchAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPublicControllerSearchAdsQueryKey(type, page, limit, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPublicControllerSearchAds>>
  > = ({ signal }) =>
    adsPublicControllerSearchAds(
      type,
      page,
      limit,
      params,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(type && page && limit),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPublicControllerSearchAdsQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerSearchAds>>
>;
export type AdsPublicControllerSearchAdsQueryError = ErrorType<AdResponseDto[]>;

export function useAdsPublicControllerSearchAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  type: string,
  page: string,
  limit: string,
  params: AdsPublicControllerSearchAdsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerSearchAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerSearchAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  type: string,
  page: string,
  limit: string,
  params: AdsPublicControllerSearchAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerSearchAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerSearchAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  type: string,
  page: string,
  limit: string,
  params: AdsPublicControllerSearchAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Search advertisements by type
 */

export function useAdsPublicControllerSearchAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  type: string,
  page: string,
  limit: string,
  params: AdsPublicControllerSearchAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerSearchAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdsPublicControllerSearchAdsQueryOptions(
    type,
    page,
    limit,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all advertisements
 */
export const adsPublicControllerFindAll = (
  page: string,
  limit: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    { url: `/ads/all/${page}/${limit}`, method: "GET", signal },
    options,
  );
};

export const getAdsPublicControllerFindAllQueryKey = (
  page: string,
  limit: string,
) => {
  return [`/ads/all/${page}/${limit}`] as const;
};

export const getAdsPublicControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPublicControllerFindAllQueryKey(page, limit);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPublicControllerFindAll>>
  > = ({ signal }) =>
    adsPublicControllerFindAll(page, limit, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(page && limit),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPublicControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerFindAll>>
>;
export type AdsPublicControllerFindAllQueryError = ErrorType<AdResponseDto[]>;

export function useAdsPublicControllerFindAll<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindAll>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindAll<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindAll>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindAll<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all advertisements
 */

export function useAdsPublicControllerFindAll<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdsPublicControllerFindAllQueryOptions(
    page,
    limit,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all of my advertisements
 */
export const adsPublicControllerFindAllofMyAds = (
  page: string,
  limit: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    { url: `/ads/my/${page}/${limit}`, method: "GET", signal },
    options,
  );
};

export const getAdsPublicControllerFindAllofMyAdsQueryKey = (
  page: string,
  limit: string,
) => {
  return [`/ads/my/${page}/${limit}`] as const;
};

export const getAdsPublicControllerFindAllofMyAdsQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPublicControllerFindAllofMyAdsQueryKey(page, limit);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>
  > = ({ signal }) =>
    adsPublicControllerFindAllofMyAds(page, limit, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(page && limit),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPublicControllerFindAllofMyAdsQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>
>;
export type AdsPublicControllerFindAllofMyAdsQueryError = ErrorType<
  AdResponseDto[]
>;

export function useAdsPublicControllerFindAllofMyAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindAllofMyAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindAllofMyAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all of my advertisements
 */

export function useAdsPublicControllerFindAllofMyAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindAllofMyAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdsPublicControllerFindAllofMyAdsQueryOptions(
    page,
    limit,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get advertisement by ID
 */
export const adsPublicControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/id/${id}`, method: "GET", signal },
    options,
  );
};

export const getAdsPublicControllerFindOneQueryKey = (id: string) => {
  return [`/ads/id/${id}`] as const;
};

export const getAdsPublicControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
  TError = ErrorType<void | AdResponseDto>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdsPublicControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPublicControllerFindOne>>
  > = ({ signal }) => adsPublicControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPublicControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerFindOne>>
>;
export type AdsPublicControllerFindOneQueryError =
  ErrorType<void | AdResponseDto>;

export function useAdsPublicControllerFindOne<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
  TError = ErrorType<void | AdResponseDto>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindOne>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindOne<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
  TError = ErrorType<void | AdResponseDto>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindOne>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindOne<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
  TError = ErrorType<void | AdResponseDto>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get advertisement by ID
 */

export function useAdsPublicControllerFindOne<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
  TError = ErrorType<void | AdResponseDto>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdsPublicControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @deprecated
 * @summary Get random advertisements
 */
export const adsPublicControllerFindRandom = (
  page: string,
  limit: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    { url: `/ads/random/${page}/${limit}`, method: "GET", signal },
    options,
  );
};

export const getAdsPublicControllerFindRandomQueryKey = (
  page: string,
  limit: string,
) => {
  return [`/ads/random/${page}/${limit}`] as const;
};

export const getAdsPublicControllerFindRandomQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPublicControllerFindRandom>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindRandom>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPublicControllerFindRandomQueryKey(page, limit);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPublicControllerFindRandom>>
  > = ({ signal }) =>
    adsPublicControllerFindRandom(page, limit, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(page && limit),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPublicControllerFindRandom>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPublicControllerFindRandomQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerFindRandom>>
>;
export type AdsPublicControllerFindRandomQueryError = ErrorType<
  AdResponseDto[]
>;

export function useAdsPublicControllerFindRandom<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindRandom>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindRandom>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindRandom>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindRandom>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindRandom<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindRandom>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindRandom>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindRandom>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindRandom>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindRandom<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindRandom>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindRandom>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @deprecated
 * @summary Get random advertisements
 */

export function useAdsPublicControllerFindRandom<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindRandom>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindRandom>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdsPublicControllerFindRandomQueryOptions(
    page,
    limit,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get line advertisements
 */
export const adsPublicControllerFindLineAds = (
  page: string,
  limit: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    { url: `/ads/line-ads/${page}/${limit}`, method: "GET", signal },
    options,
  );
};

export const getAdsPublicControllerFindLineAdsQueryKey = (
  page: string,
  limit: string,
) => {
  return [`/ads/line-ads/${page}/${limit}`] as const;
};

export const getAdsPublicControllerFindLineAdsQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPublicControllerFindLineAdsQueryKey(page, limit);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>
  > = ({ signal }) =>
    adsPublicControllerFindLineAds(page, limit, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(page && limit),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPublicControllerFindLineAdsQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>
>;
export type AdsPublicControllerFindLineAdsQueryError = ErrorType<
  AdResponseDto[]
>;

export function useAdsPublicControllerFindLineAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindLineAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindLineAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get line advertisements
 */

export function useAdsPublicControllerFindLineAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindLineAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdsPublicControllerFindLineAdsQueryOptions(
    page,
    limit,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get banner advertisements
 */
export const adsPublicControllerFindBannerAds = (
  page: string,
  limit: string,
  location: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    {
      url: `/ads/banner-ads/${page}/${limit}/${location}`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getAdsPublicControllerFindBannerAdsQueryKey = (
  page: string,
  limit: string,
  location: string,
) => {
  return [`/ads/banner-ads/${page}/${limit}/${location}`] as const;
};

export const getAdsPublicControllerFindBannerAdsQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  location: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPublicControllerFindBannerAdsQueryKey(page, limit, location);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>
  > = ({ signal }) =>
    adsPublicControllerFindBannerAds(
      page,
      limit,
      location,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(page && limit && location),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPublicControllerFindBannerAdsQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>
>;
export type AdsPublicControllerFindBannerAdsQueryError = ErrorType<
  AdResponseDto[]
>;

export function useAdsPublicControllerFindBannerAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  location: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindBannerAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  location: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
          TError,
          Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPublicControllerFindBannerAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  location: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get banner advertisements
 */

export function useAdsPublicControllerFindBannerAds<
  TData = Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  page: string,
  limit: string,
  location: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPublicControllerFindBannerAds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdsPublicControllerFindBannerAdsQueryOptions(
    page,
    limit,
    location,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Request update approval for advertisement
 */
export const adsPublicControllerRequestUpdate = (
  id: string,
  updateAdvertisementDto: BodyType<UpdateAdvertisementDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    {
      url: `/ads/request-update/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateAdvertisementDto,
    },
    options,
  );
};

export const getAdsPublicControllerRequestUpdateMutationOptions = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPublicControllerRequestUpdate>>,
    TError,
    { id: string; data: BodyType<UpdateAdvertisementDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPublicControllerRequestUpdate>>,
  TError,
  { id: string; data: BodyType<UpdateAdvertisementDto> },
  TContext
> => {
  const mutationKey = ["adsPublicControllerRequestUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPublicControllerRequestUpdate>>,
    { id: string; data: BodyType<UpdateAdvertisementDto> }
  > = (props) => {
    const { id, data } = props ?? {};

    return adsPublicControllerRequestUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPublicControllerRequestUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerRequestUpdate>>
>;
export type AdsPublicControllerRequestUpdateMutationBody =
  BodyType<UpdateAdvertisementDto>;
export type AdsPublicControllerRequestUpdateMutationError =
  ErrorType<void | AdResponseDto>;

/**
 * @summary Request update approval for advertisement
 */
export const useAdsPublicControllerRequestUpdate = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPublicControllerRequestUpdate>>,
      TError,
      { id: string; data: BodyType<UpdateAdvertisementDto> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPublicControllerRequestUpdate>>,
  TError,
  { id: string; data: BodyType<UpdateAdvertisementDto> },
  TContext
> => {
  const mutationOptions =
    getAdsPublicControllerRequestUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Request date extension approval for advertisement
 */
export const adsPublicControllerRequestDateExtend = (
  id: string,
  params: AdsPublicControllerRequestDateExtendParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/request-date-extend/${id}`, method: "PATCH", params },
    options,
  );
};

export const getAdsPublicControllerRequestDateExtendMutationOptions = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPublicControllerRequestDateExtend>>,
    TError,
    { id: string; params: AdsPublicControllerRequestDateExtendParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPublicControllerRequestDateExtend>>,
  TError,
  { id: string; params: AdsPublicControllerRequestDateExtendParams },
  TContext
> => {
  const mutationKey = ["adsPublicControllerRequestDateExtend"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPublicControllerRequestDateExtend>>,
    { id: string; params: AdsPublicControllerRequestDateExtendParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return adsPublicControllerRequestDateExtend(id, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPublicControllerRequestDateExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerRequestDateExtend>>
>;

export type AdsPublicControllerRequestDateExtendMutationError =
  ErrorType<AdResponseDto>;

/**
 * @summary Request date extension approval for advertisement
 */
export const useAdsPublicControllerRequestDateExtend = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPublicControllerRequestDateExtend>>,
      TError,
      { id: string; params: AdsPublicControllerRequestDateExtendParams },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPublicControllerRequestDateExtend>>,
  TError,
  { id: string; params: AdsPublicControllerRequestDateExtendParams },
  TContext
> => {
  const mutationOptions =
    getAdsPublicControllerRequestDateExtendMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Request count extension approval for advertisement
 */
export const adsPublicControllerRequestCountExtend = (
  id: string,
  count: string,
  params: AdsPublicControllerRequestCountExtendParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    {
      url: `/ads/request-count-extend/${id}/${count}`,
      method: "PATCH",
      params,
    },
    options,
  );
};

export const getAdsPublicControllerRequestCountExtendMutationOptions = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPublicControllerRequestCountExtend>>,
    TError,
    {
      id: string;
      count: string;
      params: AdsPublicControllerRequestCountExtendParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPublicControllerRequestCountExtend>>,
  TError,
  {
    id: string;
    count: string;
    params: AdsPublicControllerRequestCountExtendParams;
  },
  TContext
> => {
  const mutationKey = ["adsPublicControllerRequestCountExtend"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPublicControllerRequestCountExtend>>,
    {
      id: string;
      count: string;
      params: AdsPublicControllerRequestCountExtendParams;
    }
  > = (props) => {
    const { id, count, params } = props ?? {};

    return adsPublicControllerRequestCountExtend(
      id,
      count,
      params,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPublicControllerRequestCountExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerRequestCountExtend>>
>;

export type AdsPublicControllerRequestCountExtendMutationError =
  ErrorType<AdResponseDto>;

/**
 * @summary Request count extension approval for advertisement
 */
export const useAdsPublicControllerRequestCountExtend = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPublicControllerRequestCountExtend>>,
      TError,
      {
        id: string;
        count: string;
        params: AdsPublicControllerRequestCountExtendParams;
      },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPublicControllerRequestCountExtend>>,
  TError,
  {
    id: string;
    count: string;
    params: AdsPublicControllerRequestCountExtendParams;
  },
  TContext
> => {
  const mutationOptions =
    getAdsPublicControllerRequestCountExtendMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete advertisement
 */
export const adsPublicControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<boolean>(
    { url: `/ads/${id}`, method: "DELETE" },
    options,
  );
};

export const getAdsPublicControllerRemoveMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPublicControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPublicControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["adsPublicControllerRemove"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPublicControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return adsPublicControllerRemove(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPublicControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPublicControllerRemove>>
>;

export type AdsPublicControllerRemoveMutationError = ErrorType<unknown>;

/**
 * @summary Delete advertisement
 */
export const useAdsPublicControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPublicControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPublicControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getAdsPublicControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get all pending groups
 */
export const adsPrivateControllerFindAllPendingGroup = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<string[]>(
    { url: `/ads/pending-group-list`, method: "GET", signal },
    options,
  );
};

export const getAdsPrivateControllerFindAllPendingGroupQueryKey = () => {
  return [`/ads/pending-group-list`] as const;
};

export const getAdsPrivateControllerFindAllPendingGroupQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
  TError = ErrorType<string[]>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPrivateControllerFindAllPendingGroupQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>
  > = ({ signal }) =>
    adsPrivateControllerFindAllPendingGroup(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPrivateControllerFindAllPendingGroupQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>
>;
export type AdsPrivateControllerFindAllPendingGroupQueryError = ErrorType<
  string[]
>;

export function useAdsPrivateControllerFindAllPendingGroup<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
  TError = ErrorType<string[]>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
          TError,
          Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllPendingGroup<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
  TError = ErrorType<string[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
          TError,
          Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllPendingGroup<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
  TError = ErrorType<string[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all pending groups
 */

export function useAdsPrivateControllerFindAllPendingGroup<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
  TError = ErrorType<string[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getAdsPrivateControllerFindAllPendingGroupQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all advertisements by group ID
 */
export const adsPrivateControllerFindAllByGroupId = (
  groupId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    { url: `/ads/pending-group/${groupId}`, method: "GET", signal },
    options,
  );
};

export const getAdsPrivateControllerFindAllByGroupIdQueryKey = (
  groupId: string,
) => {
  return [`/ads/pending-group/${groupId}`] as const;
};

export const getAdsPrivateControllerFindAllByGroupIdQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  groupId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPrivateControllerFindAllByGroupIdQueryKey(groupId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>
  > = ({ signal }) =>
    adsPrivateControllerFindAllByGroupId(groupId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!groupId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPrivateControllerFindAllByGroupIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>
>;
export type AdsPrivateControllerFindAllByGroupIdQueryError = ErrorType<
  AdResponseDto[]
>;

export function useAdsPrivateControllerFindAllByGroupId<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  groupId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
          TError,
          Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllByGroupId<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  groupId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
          TError,
          Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllByGroupId<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  groupId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all advertisements by group ID
 */

export function useAdsPrivateControllerFindAllByGroupId<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  groupId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdsPrivateControllerFindAllByGroupIdQueryOptions(
    groupId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Approve advertisement registration
 */
export const adsPrivateControllerApprove = (
  groupId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/approve/registration/${groupId}`, method: "PATCH" },
    options,
  );
};

export const getAdsPrivateControllerApproveMutationOptions = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPrivateControllerApprove>>,
    TError,
    { groupId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPrivateControllerApprove>>,
  TError,
  { groupId: string },
  TContext
> => {
  const mutationKey = ["adsPrivateControllerApprove"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPrivateControllerApprove>>,
    { groupId: string }
  > = (props) => {
    const { groupId } = props ?? {};

    return adsPrivateControllerApprove(groupId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPrivateControllerApproveMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerApprove>>
>;

export type AdsPrivateControllerApproveMutationError = ErrorType<AdResponseDto>;

/**
 * @summary Approve advertisement registration
 */
export const useAdsPrivateControllerApprove = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPrivateControllerApprove>>,
      TError,
      { groupId: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPrivateControllerApprove>>,
  TError,
  { groupId: string },
  TContext
> => {
  const mutationOptions =
    getAdsPrivateControllerApproveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Reject advertisement registration
 */
export const adsPrivateControllerReject = (
  groupId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/reject/registration/${groupId}`, method: "PATCH" },
    options,
  );
};

export const getAdsPrivateControllerRejectMutationOptions = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPrivateControllerReject>>,
    TError,
    { groupId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPrivateControllerReject>>,
  TError,
  { groupId: string },
  TContext
> => {
  const mutationKey = ["adsPrivateControllerReject"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPrivateControllerReject>>,
    { groupId: string }
  > = (props) => {
    const { groupId } = props ?? {};

    return adsPrivateControllerReject(groupId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPrivateControllerRejectMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerReject>>
>;

export type AdsPrivateControllerRejectMutationError = ErrorType<AdResponseDto>;

/**
 * @summary Reject advertisement registration
 */
export const useAdsPrivateControllerReject = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPrivateControllerReject>>,
      TError,
      { groupId: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPrivateControllerReject>>,
  TError,
  { groupId: string },
  TContext
> => {
  const mutationOptions = getAdsPrivateControllerRejectMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get all advertisements waiting for approval
 */
export const adsPrivateControllerFindAllWaitingApproval = (
  page: string,
  limit: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    {
      url: `/ads/waiting-approval/all/${page}/${limit}`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getAdsPrivateControllerFindAllWaitingApprovalQueryKey = (
  page: string,
  limit: string,
) => {
  return [`/ads/waiting-approval/all/${page}/${limit}`] as const;
};

export const getAdsPrivateControllerFindAllWaitingApprovalQueryOptions = <
  TData = Awaited<
    ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPrivateControllerFindAllWaitingApprovalQueryKey(page, limit);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>>
  > = ({ signal }) =>
    adsPrivateControllerFindAllWaitingApproval(
      page,
      limit,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(page && limit),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPrivateControllerFindAllWaitingApprovalQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>>
>;
export type AdsPrivateControllerFindAllWaitingApprovalQueryError = ErrorType<
  void | AdResponseDto[]
>;

export function useAdsPrivateControllerFindAllWaitingApproval<
  TData = Awaited<
    ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>
          >,
          TError,
          Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllWaitingApproval<
  TData = Awaited<
    ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>
          >,
          TError,
          Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllWaitingApproval<
  TData = Awaited<
    ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all advertisements waiting for approval
 */

export function useAdsPrivateControllerFindAllWaitingApproval<
  TData = Awaited<
    ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getAdsPrivateControllerFindAllWaitingApprovalQueryOptions(
      page,
      limit,
      options,
    );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all advertisements waiting for registration
 */
export const adsPrivateControllerFindAllWaitingRegistration = (
  page: string,
  limit: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    {
      url: `/ads/waiting-approval/register/${page}/${limit}`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getAdsPrivateControllerFindAllWaitingRegistrationQueryKey = (
  page: string,
  limit: string,
) => {
  return [`/ads/waiting-approval/register/${page}/${limit}`] as const;
};

export const getAdsPrivateControllerFindAllWaitingRegistrationQueryOptions = <
  TData = Awaited<
    ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPrivateControllerFindAllWaitingRegistrationQueryKey(page, limit);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>>
  > = ({ signal }) =>
    adsPrivateControllerFindAllWaitingRegistration(
      page,
      limit,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(page && limit),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPrivateControllerFindAllWaitingRegistrationQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>>
  >;
export type AdsPrivateControllerFindAllWaitingRegistrationQueryError =
  ErrorType<void | AdResponseDto[]>;

export function useAdsPrivateControllerFindAllWaitingRegistration<
  TData = Awaited<
    ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
          >,
          TError,
          Awaited<
            ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
          >
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllWaitingRegistration<
  TData = Awaited<
    ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
          >,
          TError,
          Awaited<
            ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
          >
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllWaitingRegistration<
  TData = Awaited<
    ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all advertisements waiting for registration
 */

export function useAdsPrivateControllerFindAllWaitingRegistration<
  TData = Awaited<
    ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getAdsPrivateControllerFindAllWaitingRegistrationQueryOptions(
      page,
      limit,
      options,
    );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all advertisements waiting for update
 */
export const adsPrivateControllerFindAllWaitingUpdate = (
  page: string,
  limit: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    {
      url: `/ads/waiting-approval/update/${page}/${limit}`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getAdsPrivateControllerFindAllWaitingUpdateQueryKey = (
  page: string,
  limit: string,
) => {
  return [`/ads/waiting-approval/update/${page}/${limit}`] as const;
};

export const getAdsPrivateControllerFindAllWaitingUpdateQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPrivateControllerFindAllWaitingUpdateQueryKey(page, limit);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>
  > = ({ signal }) =>
    adsPrivateControllerFindAllWaitingUpdate(
      page,
      limit,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(page && limit),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPrivateControllerFindAllWaitingUpdateQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>
>;
export type AdsPrivateControllerFindAllWaitingUpdateQueryError = ErrorType<
  void | AdResponseDto[]
>;

export function useAdsPrivateControllerFindAllWaitingUpdate<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
          TError,
          Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllWaitingUpdate<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
          TError,
          Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllWaitingUpdate<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all advertisements waiting for update
 */

export function useAdsPrivateControllerFindAllWaitingUpdate<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdsPrivateControllerFindAllWaitingUpdateQueryOptions(
    page,
    limit,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all advertisements waiting for extend
 */
export const adsPrivateControllerFindAllWaitingExtend = (
  page: string,
  limit: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    {
      url: `/ads/waiting-approval/extend/${page}/${limit}`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getAdsPrivateControllerFindAllWaitingExtendQueryKey = (
  page: string,
  limit: string,
) => {
  return [`/ads/waiting-approval/extend/${page}/${limit}`] as const;
};

export const getAdsPrivateControllerFindAllWaitingExtendQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPrivateControllerFindAllWaitingExtendQueryKey(page, limit);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>
  > = ({ signal }) =>
    adsPrivateControllerFindAllWaitingExtend(
      page,
      limit,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(page && limit),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPrivateControllerFindAllWaitingExtendQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>
>;
export type AdsPrivateControllerFindAllWaitingExtendQueryError = ErrorType<
  void | AdResponseDto[]
>;

export function useAdsPrivateControllerFindAllWaitingExtend<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
          TError,
          Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllWaitingExtend<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
          TError,
          Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllWaitingExtend<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all advertisements waiting for extend
 */

export function useAdsPrivateControllerFindAllWaitingExtend<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  page: string,
  limit: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdsPrivateControllerFindAllWaitingExtendQueryOptions(
    page,
    limit,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Approve date extension for advertisement
 */
export const adsPrivateControllerApproveDateExtend = (
  groupId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/approve-date-extend/${groupId}`, method: "PATCH" },
    options,
  );
};

export const getAdsPrivateControllerApproveDateExtendMutationOptions = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPrivateControllerApproveDateExtend>>,
    TError,
    { groupId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPrivateControllerApproveDateExtend>>,
  TError,
  { groupId: string },
  TContext
> => {
  const mutationKey = ["adsPrivateControllerApproveDateExtend"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPrivateControllerApproveDateExtend>>,
    { groupId: string }
  > = (props) => {
    const { groupId } = props ?? {};

    return adsPrivateControllerApproveDateExtend(groupId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPrivateControllerApproveDateExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerApproveDateExtend>>
>;

export type AdsPrivateControllerApproveDateExtendMutationError =
  ErrorType<void | AdResponseDto>;

/**
 * @summary Approve date extension for advertisement
 */
export const useAdsPrivateControllerApproveDateExtend = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPrivateControllerApproveDateExtend>>,
      TError,
      { groupId: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPrivateControllerApproveDateExtend>>,
  TError,
  { groupId: string },
  TContext
> => {
  const mutationOptions =
    getAdsPrivateControllerApproveDateExtendMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Approve count extension for advertisement
 */
export const adsPrivateControllerApproveCountExtend = (
  groupId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/approve-count-extend/${groupId}`, method: "PATCH" },
    options,
  );
};

export const getAdsPrivateControllerApproveCountExtendMutationOptions = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPrivateControllerApproveCountExtend>>,
    TError,
    { groupId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPrivateControllerApproveCountExtend>>,
  TError,
  { groupId: string },
  TContext
> => {
  const mutationKey = ["adsPrivateControllerApproveCountExtend"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPrivateControllerApproveCountExtend>>,
    { groupId: string }
  > = (props) => {
    const { groupId } = props ?? {};

    return adsPrivateControllerApproveCountExtend(groupId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPrivateControllerApproveCountExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerApproveCountExtend>>
>;

export type AdsPrivateControllerApproveCountExtendMutationError =
  ErrorType<void | AdResponseDto>;

/**
 * @summary Approve count extension for advertisement
 */
export const useAdsPrivateControllerApproveCountExtend = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPrivateControllerApproveCountExtend>>,
      TError,
      { groupId: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPrivateControllerApproveCountExtend>>,
  TError,
  { groupId: string },
  TContext
> => {
  const mutationOptions =
    getAdsPrivateControllerApproveCountExtendMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Reject date extension for advertisement
 */
export const adsPrivateControllerRejectDateExtend = (
  groupId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/reject-date-extend/${groupId}`, method: "PATCH" },
    options,
  );
};

export const getAdsPrivateControllerRejectDateExtendMutationOptions = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPrivateControllerRejectDateExtend>>,
    TError,
    { groupId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPrivateControllerRejectDateExtend>>,
  TError,
  { groupId: string },
  TContext
> => {
  const mutationKey = ["adsPrivateControllerRejectDateExtend"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPrivateControllerRejectDateExtend>>,
    { groupId: string }
  > = (props) => {
    const { groupId } = props ?? {};

    return adsPrivateControllerRejectDateExtend(groupId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPrivateControllerRejectDateExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerRejectDateExtend>>
>;

export type AdsPrivateControllerRejectDateExtendMutationError =
  ErrorType<void | AdResponseDto>;

/**
 * @summary Reject date extension for advertisement
 */
export const useAdsPrivateControllerRejectDateExtend = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPrivateControllerRejectDateExtend>>,
      TError,
      { groupId: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPrivateControllerRejectDateExtend>>,
  TError,
  { groupId: string },
  TContext
> => {
  const mutationOptions =
    getAdsPrivateControllerRejectDateExtendMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Reject count extension for advertisement
 */
export const adsPrivateControllerRejectCountExtend = (
  groupId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/reject-count-extend/${groupId}`, method: "PATCH" },
    options,
  );
};

export const getAdsPrivateControllerRejectCountExtendMutationOptions = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPrivateControllerRejectCountExtend>>,
    TError,
    { groupId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPrivateControllerRejectCountExtend>>,
  TError,
  { groupId: string },
  TContext
> => {
  const mutationKey = ["adsPrivateControllerRejectCountExtend"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPrivateControllerRejectCountExtend>>,
    { groupId: string }
  > = (props) => {
    const { groupId } = props ?? {};

    return adsPrivateControllerRejectCountExtend(groupId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPrivateControllerRejectCountExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerRejectCountExtend>>
>;

export type AdsPrivateControllerRejectCountExtendMutationError =
  ErrorType<void | AdResponseDto>;

/**
 * @summary Reject count extension for advertisement
 */
export const useAdsPrivateControllerRejectCountExtend = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPrivateControllerRejectCountExtend>>,
      TError,
      { groupId: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPrivateControllerRejectCountExtend>>,
  TError,
  { groupId: string },
  TContext
> => {
  const mutationOptions =
    getAdsPrivateControllerRejectCountExtendMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Approve advertisement update
 */
export const adsPrivateControllerApproveUpdate = (
  groupId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/approve-update/${groupId}`, method: "PATCH" },
    options,
  );
};

export const getAdsPrivateControllerApproveUpdateMutationOptions = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPrivateControllerApproveUpdate>>,
    TError,
    { groupId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPrivateControllerApproveUpdate>>,
  TError,
  { groupId: string },
  TContext
> => {
  const mutationKey = ["adsPrivateControllerApproveUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPrivateControllerApproveUpdate>>,
    { groupId: string }
  > = (props) => {
    const { groupId } = props ?? {};

    return adsPrivateControllerApproveUpdate(groupId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPrivateControllerApproveUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerApproveUpdate>>
>;

export type AdsPrivateControllerApproveUpdateMutationError =
  ErrorType<void | AdResponseDto>;

/**
 * @summary Approve advertisement update
 */
export const useAdsPrivateControllerApproveUpdate = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPrivateControllerApproveUpdate>>,
      TError,
      { groupId: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPrivateControllerApproveUpdate>>,
  TError,
  { groupId: string },
  TContext
> => {
  const mutationOptions =
    getAdsPrivateControllerApproveUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Reject advertisement update
 */
export const adsPrivateControllerRejectUpdate = (
  groupId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/reject-update/${groupId}`, method: "PATCH" },
    options,
  );
};

export const getAdsPrivateControllerRejectUpdateMutationOptions = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPrivateControllerRejectUpdate>>,
    TError,
    { groupId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPrivateControllerRejectUpdate>>,
  TError,
  { groupId: string },
  TContext
> => {
  const mutationKey = ["adsPrivateControllerRejectUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPrivateControllerRejectUpdate>>,
    { groupId: string }
  > = (props) => {
    const { groupId } = props ?? {};

    return adsPrivateControllerRejectUpdate(groupId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPrivateControllerRejectUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerRejectUpdate>>
>;

export type AdsPrivateControllerRejectUpdateMutationError =
  ErrorType<void | AdResponseDto>;

/**
 * @summary Reject advertisement update
 */
export const useAdsPrivateControllerRejectUpdate = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPrivateControllerRejectUpdate>>,
      TError,
      { groupId: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPrivateControllerRejectUpdate>>,
  TError,
  { groupId: string },
  TContext
> => {
  const mutationOptions =
    getAdsPrivateControllerRejectUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
