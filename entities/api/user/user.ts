/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Loan API
 * 지역, 상품 등을 Query를 통해 여러 개를 보낼 때는 콤마(,)로 구분하여 보내주세요. 예시: ?location=서울,부산,대구
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  Object,
  UserControllerApproveWithdrawal200,
  UserControllerDeleteProfile200,
  UserControllerJumpCount200,
  UserControllerJumpCountDown200,
  UserControllerJumpCountUp200,
  UserControllerRegAvailableCompany200,
  UserControllerRegAvailableCompanyDown200,
  UserControllerRegAvailableCompanySet200,
  UserControllerRegAvailableCompanyUp200,
  UserControllerRequestWithdrawal200,
  UserControllerSetJumpCount200,
  UserResponseDto,
} from "../../const";

import { customInstance } from "../../../shared/axios/lib/customInstance";
import type {
  ErrorType,
  BodyType,
} from "../../../shared/axios/lib/customInstance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * 시스템의 모든 사용자 목록을 조회합니다.
 * @summary 모든 사용자 조회
 */
export const userControllerFindAll = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserResponseDto[]>(
    { url: `/user`, method: "GET", signal },
    options,
  );
};

export const getUserControllerFindAllQueryKey = () => {
  return [`/user`] as const;
};

export const getUserControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof userControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUserControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerFindAll>>
  > = ({ signal }) => userControllerFindAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerFindAll>>
>;
export type UserControllerFindAllQueryError = ErrorType<unknown>;

export function useUserControllerFindAll<
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof userControllerFindAll>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerFindAll<
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof userControllerFindAll>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerFindAll<
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary 모든 사용자 조회
 */

export function useUserControllerFindAll<
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUserControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 활동 허가된 사용자 목록을 조회합니다.
 * @summary 활동 허가된 사용자 조회
 */
export const userControllerActives = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserResponseDto[]>(
    { url: `/user/active`, method: "GET", signal },
    options,
  );
};

export const getUserControllerActivesQueryKey = () => {
  return [`/user/active`] as const;
};

export const getUserControllerActivesQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerActives>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof userControllerActives>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUserControllerActivesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerActives>>
  > = ({ signal }) => userControllerActives(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerActives>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerActivesQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerActives>>
>;
export type UserControllerActivesQueryError = ErrorType<unknown>;

export function useUserControllerActives<
  TData = Awaited<ReturnType<typeof userControllerActives>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerActives>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerActives>>,
          TError,
          Awaited<ReturnType<typeof userControllerActives>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerActives<
  TData = Awaited<ReturnType<typeof userControllerActives>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerActives>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerActives>>,
          TError,
          Awaited<ReturnType<typeof userControllerActives>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerActives<
  TData = Awaited<ReturnType<typeof userControllerActives>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerActives>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary 활동 허가된 사용자 조회
 */

export function useUserControllerActives<
  TData = Awaited<ReturnType<typeof userControllerActives>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerActives>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUserControllerActivesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 블랙리스트에 등록된 사용자 목록을 조회합니다.
 * @summary 블랙리스트 사용자 조회
 */
export const userControllerBlacklist = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserResponseDto[]>(
    { url: `/user/blacklist`, method: "GET", signal },
    options,
  );
};

export const getUserControllerBlacklistQueryKey = () => {
  return [`/user/blacklist`] as const;
};

export const getUserControllerBlacklistQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerBlacklist>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof userControllerBlacklist>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUserControllerBlacklistQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerBlacklist>>
  > = ({ signal }) => userControllerBlacklist(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerBlacklist>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerBlacklistQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerBlacklist>>
>;
export type UserControllerBlacklistQueryError = ErrorType<unknown>;

export function useUserControllerBlacklist<
  TData = Awaited<ReturnType<typeof userControllerBlacklist>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerBlacklist>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerBlacklist>>,
          TError,
          Awaited<ReturnType<typeof userControllerBlacklist>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerBlacklist<
  TData = Awaited<ReturnType<typeof userControllerBlacklist>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerBlacklist>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerBlacklist>>,
          TError,
          Awaited<ReturnType<typeof userControllerBlacklist>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerBlacklist<
  TData = Awaited<ReturnType<typeof userControllerBlacklist>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerBlacklist>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary 블랙리스트 사용자 조회
 */

export function useUserControllerBlacklist<
  TData = Awaited<ReturnType<typeof userControllerBlacklist>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerBlacklist>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUserControllerBlacklistQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 현재 비활성화 상태인 사용자 목록을 조회합니다.
 * @summary 비활성화된 사용자 조회
 */
export const userControllerDeactive = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserResponseDto[]>(
    { url: `/user/deactive`, method: "GET", signal },
    options,
  );
};

export const getUserControllerDeactiveQueryKey = () => {
  return [`/user/deactive`] as const;
};

export const getUserControllerDeactiveQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerDeactive>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof userControllerDeactive>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUserControllerDeactiveQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerDeactive>>
  > = ({ signal }) => userControllerDeactive(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerDeactive>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerDeactiveQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerDeactive>>
>;
export type UserControllerDeactiveQueryError = ErrorType<unknown>;

export function useUserControllerDeactive<
  TData = Awaited<ReturnType<typeof userControllerDeactive>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerDeactive>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerDeactive>>,
          TError,
          Awaited<ReturnType<typeof userControllerDeactive>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerDeactive<
  TData = Awaited<ReturnType<typeof userControllerDeactive>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerDeactive>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerDeactive>>,
          TError,
          Awaited<ReturnType<typeof userControllerDeactive>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerDeactive<
  TData = Awaited<ReturnType<typeof userControllerDeactive>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerDeactive>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary 비활성화된 사용자 조회
 */

export function useUserControllerDeactive<
  TData = Awaited<ReturnType<typeof userControllerDeactive>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerDeactive>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUserControllerDeactiveQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 특정 사용자를 블랙리스트에 등록합니다.
 * @summary 사용자 블랙리스트 등록
 */
export const userControllerBlack = (
  userControllerBlackBody: BodyType<Object>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserResponseDto>(
    {
      url: `/user/black`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: userControllerBlackBody,
      signal,
    },
    options,
  );
};

export const getUserControllerBlackMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerBlack>>,
    TError,
    { data: BodyType<Object> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerBlack>>,
  TError,
  { data: BodyType<Object> },
  TContext
> => {
  const mutationKey = ["userControllerBlack"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerBlack>>,
    { data: BodyType<Object> }
  > = (props) => {
    const { data } = props ?? {};

    return userControllerBlack(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerBlackMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerBlack>>
>;
export type UserControllerBlackMutationBody = BodyType<Object>;
export type UserControllerBlackMutationError = ErrorType<unknown>;

/**
 * @summary 사용자 블랙리스트 등록
 */
export const useUserControllerBlack = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerBlack>>,
      TError,
      { data: BodyType<Object> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerBlack>>,
  TError,
  { data: BodyType<Object> },
  TContext
> => {
  const mutationOptions = getUserControllerBlackMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 블랙리스트에서 사용자를 제외합니다.
 * @summary 사용자 블랙리스트 해제
 */
export const userControllerPardon = (
  userControllerPardonBody: BodyType<Object>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserResponseDto>(
    {
      url: `/user/pardon`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: userControllerPardonBody,
      signal,
    },
    options,
  );
};

export const getUserControllerPardonMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerPardon>>,
    TError,
    { data: BodyType<Object> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerPardon>>,
  TError,
  { data: BodyType<Object> },
  TContext
> => {
  const mutationKey = ["userControllerPardon"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerPardon>>,
    { data: BodyType<Object> }
  > = (props) => {
    const { data } = props ?? {};

    return userControllerPardon(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerPardonMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerPardon>>
>;
export type UserControllerPardonMutationBody = BodyType<Object>;
export type UserControllerPardonMutationError = ErrorType<unknown>;

/**
 * @summary 사용자 블랙리스트 해제
 */
export const useUserControllerPardon = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerPardon>>,
      TError,
      { data: BodyType<Object> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerPardon>>,
  TError,
  { data: BodyType<Object> },
  TContext
> => {
  const mutationOptions = getUserControllerPardonMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 비활성화된 사용자를 활성화 상태로 변경합니다.
 * @summary 사용자 활동 허가
 */
export const userControllerActive = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserResponseDto>(
    { url: `/user/active/${id}`, method: "POST", signal },
    options,
  );
};

export const getUserControllerActiveMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerActive>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerActive>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["userControllerActive"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerActive>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return userControllerActive(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerActiveMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerActive>>
>;

export type UserControllerActiveMutationError = ErrorType<unknown>;

/**
 * @summary 사용자 활동 허가
 */
export const useUserControllerActive = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerActive>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerActive>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getUserControllerActiveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 활동 허가된 사용자를 비활성화 상태로 변경합니다.
 * @summary 사용자 활동 비활성화
 */
export const userControllerDeactiveUser = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserResponseDto>(
    { url: `/user/deactive/${id}`, method: "POST", signal },
    options,
  );
};

export const getUserControllerDeactiveUserMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerDeactiveUser>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerDeactiveUser>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["userControllerDeactiveUser"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerDeactiveUser>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return userControllerDeactiveUser(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerDeactiveUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerDeactiveUser>>
>;

export type UserControllerDeactiveUserMutationError = ErrorType<unknown>;

/**
 * @summary 사용자 활동 비활성화
 */
export const useUserControllerDeactiveUser = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerDeactiveUser>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerDeactiveUser>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getUserControllerDeactiveUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 현재 로그인한 사용자의 프로필 정보를 조회합니다.
 * @summary 사용자 프로필 조회
 */
export const userControllerProfile = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserResponseDto>(
    { url: `/user/profile`, method: "GET", signal },
    options,
  );
};

export const getUserControllerProfileQueryKey = () => {
  return [`/user/profile`] as const;
};

export const getUserControllerProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerProfile>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof userControllerProfile>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUserControllerProfileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerProfile>>
  > = ({ signal }) => userControllerProfile(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerProfile>>
>;
export type UserControllerProfileQueryError = ErrorType<unknown>;

export function useUserControllerProfile<
  TData = Awaited<ReturnType<typeof userControllerProfile>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerProfile>>,
          TError,
          Awaited<ReturnType<typeof userControllerProfile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerProfile<
  TData = Awaited<ReturnType<typeof userControllerProfile>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerProfile>>,
          TError,
          Awaited<ReturnType<typeof userControllerProfile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerProfile<
  TData = Awaited<ReturnType<typeof userControllerProfile>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary 사용자 프로필 조회
 */

export function useUserControllerProfile<
  TData = Awaited<ReturnType<typeof userControllerProfile>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUserControllerProfileQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 특정 사용자의 프로필 정보를 조회합니다.
 * @summary 사용자 프로필 조회
 */
export const userControllerProfileById = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserResponseDto>(
    { url: `/user/profile/${id}`, method: "GET", signal },
    options,
  );
};

export const getUserControllerProfileByIdQueryKey = (id: string) => {
  return [`/user/profile/${id}`] as const;
};

export const getUserControllerProfileByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerProfileById>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerProfileById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUserControllerProfileByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerProfileById>>
  > = ({ signal }) => userControllerProfileById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerProfileById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerProfileByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerProfileById>>
>;
export type UserControllerProfileByIdQueryError = ErrorType<unknown>;

export function useUserControllerProfileById<
  TData = Awaited<ReturnType<typeof userControllerProfileById>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerProfileById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerProfileById>>,
          TError,
          Awaited<ReturnType<typeof userControllerProfileById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerProfileById<
  TData = Awaited<ReturnType<typeof userControllerProfileById>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerProfileById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerProfileById>>,
          TError,
          Awaited<ReturnType<typeof userControllerProfileById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerProfileById<
  TData = Awaited<ReturnType<typeof userControllerProfileById>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerProfileById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary 사용자 프로필 조회
 */

export function useUserControllerProfileById<
  TData = Awaited<ReturnType<typeof userControllerProfileById>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerProfileById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUserControllerProfileByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 특정 사용자의 프로필 정보를 삭제합니다.
 * @summary 사용자 프로필 삭제
 */
export const userControllerDeleteProfile = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserControllerDeleteProfile200>(
    { url: `/user/${id}`, method: "DELETE" },
    options,
  );
};

export const getUserControllerDeleteProfileMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerDeleteProfile>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerDeleteProfile>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["userControllerDeleteProfile"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerDeleteProfile>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return userControllerDeleteProfile(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerDeleteProfileMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerDeleteProfile>>
>;

export type UserControllerDeleteProfileMutationError = ErrorType<unknown>;

/**
 * @summary 사용자 프로필 삭제
 */
export const useUserControllerDeleteProfile = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerDeleteProfile>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerDeleteProfile>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getUserControllerDeleteProfileMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 특정 사용자의 정보를 조회합니다.
 * @summary 사용자 정보 조회
 */
export const userControllerGetUser = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserResponseDto>(
    { url: `/user/${id}`, method: "GET", signal },
    options,
  );
};

export const getUserControllerGetUserQueryKey = (id: string) => {
  return [`/user/${id}`] as const;
};

export const getUserControllerGetUserQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerGetUser>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUserControllerGetUserQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerGetUser>>
  > = ({ signal }) => userControllerGetUser(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerGetUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerGetUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerGetUser>>
>;
export type UserControllerGetUserQueryError = ErrorType<unknown>;

export function useUserControllerGetUser<
  TData = Awaited<ReturnType<typeof userControllerGetUser>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetUser>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerGetUser>>,
          TError,
          Awaited<ReturnType<typeof userControllerGetUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerGetUser<
  TData = Awaited<ReturnType<typeof userControllerGetUser>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetUser>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerGetUser>>,
          TError,
          Awaited<ReturnType<typeof userControllerGetUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerGetUser<
  TData = Awaited<ReturnType<typeof userControllerGetUser>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary 사용자 정보 조회
 */

export function useUserControllerGetUser<
  TData = Awaited<ReturnType<typeof userControllerGetUser>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUserControllerGetUserQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 유저가 자신의 계정에 대해 탈퇴 요청을 합니다.
 * @summary 계정 탈퇴 요청
 */
export const userControllerRequestWithdrawal = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserControllerRequestWithdrawal200>(
    { url: `/user/withdrawal-request`, method: "PATCH" },
    options,
  );
};

export const getUserControllerRequestWithdrawalMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerRequestWithdrawal>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerRequestWithdrawal>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["userControllerRequestWithdrawal"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerRequestWithdrawal>>,
    void
  > = () => {
    return userControllerRequestWithdrawal(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerRequestWithdrawalMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerRequestWithdrawal>>
>;

export type UserControllerRequestWithdrawalMutationError = ErrorType<unknown>;

/**
 * @summary 계정 탈퇴 요청
 */
export const useUserControllerRequestWithdrawal = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerRequestWithdrawal>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerRequestWithdrawal>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getUserControllerRequestWithdrawalMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 어드민이 탈퇴 요청된 계정을 삭제합니다.
 * @summary 탈퇴 요청 승인(계정 삭제)
 */
export const userControllerApproveWithdrawal = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserControllerApproveWithdrawal200>(
    { url: `/user/admin/withdrawal/${id}`, method: "DELETE" },
    options,
  );
};

export const getUserControllerApproveWithdrawalMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerApproveWithdrawal>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerApproveWithdrawal>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["userControllerApproveWithdrawal"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerApproveWithdrawal>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return userControllerApproveWithdrawal(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerApproveWithdrawalMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerApproveWithdrawal>>
>;

export type UserControllerApproveWithdrawalMutationError = ErrorType<unknown>;

/**
 * @summary 탈퇴 요청 승인(계정 삭제)
 */
export const useUserControllerApproveWithdrawal = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerApproveWithdrawal>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerApproveWithdrawal>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getUserControllerApproveWithdrawalMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 탈퇴 요청된 유저 목록을 조회합니다.
 * @summary 탈퇴 요청 목록 조회
 */
export const userControllerGetWithdrawalRequests = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserResponseDto[]>(
    { url: `/user/admin/withdrawal-requests`, method: "GET", signal },
    options,
  );
};

export const getUserControllerGetWithdrawalRequestsQueryKey = () => {
  return [`/user/admin/withdrawal-requests`] as const;
};

export const getUserControllerGetWithdrawalRequestsQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerGetWithdrawalRequests>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof userControllerGetWithdrawalRequests>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUserControllerGetWithdrawalRequestsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerGetWithdrawalRequests>>
  > = ({ signal }) =>
    userControllerGetWithdrawalRequests(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerGetWithdrawalRequests>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerGetWithdrawalRequestsQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerGetWithdrawalRequests>>
>;
export type UserControllerGetWithdrawalRequestsQueryError = ErrorType<unknown>;

export function useUserControllerGetWithdrawalRequests<
  TData = Awaited<ReturnType<typeof userControllerGetWithdrawalRequests>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetWithdrawalRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerGetWithdrawalRequests>>,
          TError,
          Awaited<ReturnType<typeof userControllerGetWithdrawalRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerGetWithdrawalRequests<
  TData = Awaited<ReturnType<typeof userControllerGetWithdrawalRequests>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetWithdrawalRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerGetWithdrawalRequests>>,
          TError,
          Awaited<ReturnType<typeof userControllerGetWithdrawalRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerGetWithdrawalRequests<
  TData = Awaited<ReturnType<typeof userControllerGetWithdrawalRequests>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetWithdrawalRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary 탈퇴 요청 목록 조회
 */

export function useUserControllerGetWithdrawalRequests<
  TData = Awaited<ReturnType<typeof userControllerGetWithdrawalRequests>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetWithdrawalRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getUserControllerGetWithdrawalRequestsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 사용자를 검색합니다.
 * @summary 사용자 검색
 */
export const userControllerSearch = (
  query: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserResponseDto[]>(
    { url: `/user/search/${query}`, method: "GET", signal },
    options,
  );
};

export const getUserControllerSearchQueryKey = (query: string) => {
  return [`/user/search/${query}`] as const;
};

export const getUserControllerSearchQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerSearch>>,
  TError = ErrorType<unknown>,
>(
  query: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerSearch>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUserControllerSearchQueryKey(query);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerSearch>>
  > = ({ signal }) => userControllerSearch(query, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!query,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerSearch>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerSearchQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerSearch>>
>;
export type UserControllerSearchQueryError = ErrorType<unknown>;

export function useUserControllerSearch<
  TData = Awaited<ReturnType<typeof userControllerSearch>>,
  TError = ErrorType<unknown>,
>(
  query: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerSearch>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerSearch>>,
          TError,
          Awaited<ReturnType<typeof userControllerSearch>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerSearch<
  TData = Awaited<ReturnType<typeof userControllerSearch>>,
  TError = ErrorType<unknown>,
>(
  query: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerSearch>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerSearch>>,
          TError,
          Awaited<ReturnType<typeof userControllerSearch>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerSearch<
  TData = Awaited<ReturnType<typeof userControllerSearch>>,
  TError = ErrorType<unknown>,
>(
  query: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerSearch>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary 사용자 검색
 */

export function useUserControllerSearch<
  TData = Awaited<ReturnType<typeof userControllerSearch>>,
  TError = ErrorType<unknown>,
>(
  query: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerSearch>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUserControllerSearchQueryOptions(query, options);

  const _query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  _query.queryKey = queryOptions.queryKey;

  return _query;
}

/**
 * 사용자의 점프 카운트를 조회합니다.
 * @summary 점프 카운트 조회
 */
export const userControllerJumpCount = (
  userId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserControllerJumpCount200>(
    { url: `/user/jump_count/${userId}`, method: "GET", signal },
    options,
  );
};

export const getUserControllerJumpCountQueryKey = (userId: string) => {
  return [`/user/jump_count/${userId}`] as const;
};

export const getUserControllerJumpCountQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerJumpCount>>,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerJumpCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUserControllerJumpCountQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerJumpCount>>
  > = ({ signal }) => userControllerJumpCount(userId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerJumpCount>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerJumpCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerJumpCount>>
>;
export type UserControllerJumpCountQueryError = ErrorType<unknown>;

export function useUserControllerJumpCount<
  TData = Awaited<ReturnType<typeof userControllerJumpCount>>,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerJumpCount>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerJumpCount>>,
          TError,
          Awaited<ReturnType<typeof userControllerJumpCount>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerJumpCount<
  TData = Awaited<ReturnType<typeof userControllerJumpCount>>,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerJumpCount>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerJumpCount>>,
          TError,
          Awaited<ReturnType<typeof userControllerJumpCount>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerJumpCount<
  TData = Awaited<ReturnType<typeof userControllerJumpCount>>,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerJumpCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary 점프 카운트 조회
 */

export function useUserControllerJumpCount<
  TData = Awaited<ReturnType<typeof userControllerJumpCount>>,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerJumpCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUserControllerJumpCountQueryOptions(userId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 사용자의 점프 카운트를 증가시킵니다.
 * @summary 점프 카운트 증가
 */
export const userControllerJumpCountUp = (
  userId: string,
  count: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserControllerJumpCountUp200>(
    { url: `/user/jump_count/up/${userId}/${count}`, method: "PATCH" },
    options,
  );
};

export const getUserControllerJumpCountUpMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerJumpCountUp>>,
    TError,
    { userId: string; count: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerJumpCountUp>>,
  TError,
  { userId: string; count: number },
  TContext
> => {
  const mutationKey = ["userControllerJumpCountUp"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerJumpCountUp>>,
    { userId: string; count: number }
  > = (props) => {
    const { userId, count } = props ?? {};

    return userControllerJumpCountUp(userId, count, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerJumpCountUpMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerJumpCountUp>>
>;

export type UserControllerJumpCountUpMutationError = ErrorType<unknown>;

/**
 * @summary 점프 카운트 증가
 */
export const useUserControllerJumpCountUp = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerJumpCountUp>>,
      TError,
      { userId: string; count: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerJumpCountUp>>,
  TError,
  { userId: string; count: number },
  TContext
> => {
  const mutationOptions = getUserControllerJumpCountUpMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 사용자의 점프 카운트를 감소시킵니다.
 * @summary 점프 카운트 감소
 */
export const userControllerJumpCountDown = (
  userId: string,
  count: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserControllerJumpCountDown200>(
    { url: `/user/jump_count/down/${userId}/${count}`, method: "PATCH" },
    options,
  );
};

export const getUserControllerJumpCountDownMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerJumpCountDown>>,
    TError,
    { userId: string; count: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerJumpCountDown>>,
  TError,
  { userId: string; count: number },
  TContext
> => {
  const mutationKey = ["userControllerJumpCountDown"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerJumpCountDown>>,
    { userId: string; count: number }
  > = (props) => {
    const { userId, count } = props ?? {};

    return userControllerJumpCountDown(userId, count, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerJumpCountDownMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerJumpCountDown>>
>;

export type UserControllerJumpCountDownMutationError = ErrorType<unknown>;

/**
 * @summary 점프 카운트 감소
 */
export const useUserControllerJumpCountDown = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerJumpCountDown>>,
      TError,
      { userId: string; count: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerJumpCountDown>>,
  TError,
  { userId: string; count: number },
  TContext
> => {
  const mutationOptions =
    getUserControllerJumpCountDownMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 사용자의 점프 카운트를 설정합니다.
 * @summary 점프 카운트 설정
 */
export const userControllerSetJumpCount = (
  userId: string,
  count: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserControllerSetJumpCount200>(
    { url: `/user/jump_count/set/${userId}/${count}`, method: "PATCH" },
    options,
  );
};

export const getUserControllerSetJumpCountMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerSetJumpCount>>,
    TError,
    { userId: string; count: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerSetJumpCount>>,
  TError,
  { userId: string; count: number },
  TContext
> => {
  const mutationKey = ["userControllerSetJumpCount"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerSetJumpCount>>,
    { userId: string; count: number }
  > = (props) => {
    const { userId, count } = props ?? {};

    return userControllerSetJumpCount(userId, count, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerSetJumpCountMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerSetJumpCount>>
>;

export type UserControllerSetJumpCountMutationError = ErrorType<unknown>;

/**
 * @summary 점프 카운트 설정
 */
export const useUserControllerSetJumpCount = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerSetJumpCount>>,
      TError,
      { userId: string; count: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerSetJumpCount>>,
  TError,
  { userId: string; count: number },
  TContext
> => {
  const mutationOptions = getUserControllerSetJumpCountMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 사용자의 실시간 대출문의 업체 등록 카운트를 조회합니다.
 * @summary 실시간 대출문의 업체 등록 카운트 조회
 */
export const userControllerRegAvailableCompany = (
  userId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserControllerRegAvailableCompany200>(
    { url: `/user/reg-available-company/${userId}`, method: "GET", signal },
    options,
  );
};

export const getUserControllerRegAvailableCompanyQueryKey = (
  userId: string,
) => {
  return [`/user/reg-available-company/${userId}`] as const;
};

export const getUserControllerRegAvailableCompanyQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerRegAvailableCompany>>,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerRegAvailableCompany>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getUserControllerRegAvailableCompanyQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerRegAvailableCompany>>
  > = ({ signal }) =>
    userControllerRegAvailableCompany(userId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerRegAvailableCompany>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerRegAvailableCompanyQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerRegAvailableCompany>>
>;
export type UserControllerRegAvailableCompanyQueryError = ErrorType<unknown>;

export function useUserControllerRegAvailableCompany<
  TData = Awaited<ReturnType<typeof userControllerRegAvailableCompany>>,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerRegAvailableCompany>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerRegAvailableCompany>>,
          TError,
          Awaited<ReturnType<typeof userControllerRegAvailableCompany>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerRegAvailableCompany<
  TData = Awaited<ReturnType<typeof userControllerRegAvailableCompany>>,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerRegAvailableCompany>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerRegAvailableCompany>>,
          TError,
          Awaited<ReturnType<typeof userControllerRegAvailableCompany>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerRegAvailableCompany<
  TData = Awaited<ReturnType<typeof userControllerRegAvailableCompany>>,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerRegAvailableCompany>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary 실시간 대출문의 업체 등록 카운트 조회
 */

export function useUserControllerRegAvailableCompany<
  TData = Awaited<ReturnType<typeof userControllerRegAvailableCompany>>,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerRegAvailableCompany>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUserControllerRegAvailableCompanyQueryOptions(
    userId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 사용자의 실시간 대출문의 업체 등록 카운트를 증가시킵니다.
 * @summary 실시간 대출문의 업체 등록 카운트 증가
 */
export const userControllerRegAvailableCompanyUp = (
  userId: string,
  count: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserControllerRegAvailableCompanyUp200>(
    {
      url: `/user/reg-available-company/up/${userId}/${count}`,
      method: "PATCH",
    },
    options,
  );
};

export const getUserControllerRegAvailableCompanyUpMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerRegAvailableCompanyUp>>,
    TError,
    { userId: string; count: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerRegAvailableCompanyUp>>,
  TError,
  { userId: string; count: number },
  TContext
> => {
  const mutationKey = ["userControllerRegAvailableCompanyUp"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerRegAvailableCompanyUp>>,
    { userId: string; count: number }
  > = (props) => {
    const { userId, count } = props ?? {};

    return userControllerRegAvailableCompanyUp(userId, count, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerRegAvailableCompanyUpMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerRegAvailableCompanyUp>>
>;

export type UserControllerRegAvailableCompanyUpMutationError =
  ErrorType<unknown>;

/**
 * @summary 실시간 대출문의 업체 등록 카운트 증가
 */
export const useUserControllerRegAvailableCompanyUp = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerRegAvailableCompanyUp>>,
      TError,
      { userId: string; count: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerRegAvailableCompanyUp>>,
  TError,
  { userId: string; count: number },
  TContext
> => {
  const mutationOptions =
    getUserControllerRegAvailableCompanyUpMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 사용자의 실시간 대출문의 업체 등록 카운트를 감소시킵니다.
 * @summary 실시간 대출문의 업체 등록 카운트 감소
 */
export const userControllerRegAvailableCompanyDown = (
  userId: string,
  count: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserControllerRegAvailableCompanyDown200>(
    {
      url: `/user/reg-available-company/down/${userId}/${count}`,
      method: "PATCH",
    },
    options,
  );
};

export const getUserControllerRegAvailableCompanyDownMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerRegAvailableCompanyDown>>,
    TError,
    { userId: string; count: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerRegAvailableCompanyDown>>,
  TError,
  { userId: string; count: number },
  TContext
> => {
  const mutationKey = ["userControllerRegAvailableCompanyDown"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerRegAvailableCompanyDown>>,
    { userId: string; count: number }
  > = (props) => {
    const { userId, count } = props ?? {};

    return userControllerRegAvailableCompanyDown(userId, count, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerRegAvailableCompanyDownMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerRegAvailableCompanyDown>>
>;

export type UserControllerRegAvailableCompanyDownMutationError =
  ErrorType<unknown>;

/**
 * @summary 실시간 대출문의 업체 등록 카운트 감소
 */
export const useUserControllerRegAvailableCompanyDown = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerRegAvailableCompanyDown>>,
      TError,
      { userId: string; count: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerRegAvailableCompanyDown>>,
  TError,
  { userId: string; count: number },
  TContext
> => {
  const mutationOptions =
    getUserControllerRegAvailableCompanyDownMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 사용자의 실시간 대출문의 업체 등록 카운트를 설정합니다.
 * @summary 실시간 대출문의 업체 등록 카운트 설정
 */
export const userControllerRegAvailableCompanySet = (
  userId: string,
  count: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserControllerRegAvailableCompanySet200>(
    {
      url: `/user/reg-available-company/set/${userId}/${count}`,
      method: "PATCH",
    },
    options,
  );
};

export const getUserControllerRegAvailableCompanySetMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerRegAvailableCompanySet>>,
    TError,
    { userId: string; count: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerRegAvailableCompanySet>>,
  TError,
  { userId: string; count: number },
  TContext
> => {
  const mutationKey = ["userControllerRegAvailableCompanySet"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerRegAvailableCompanySet>>,
    { userId: string; count: number }
  > = (props) => {
    const { userId, count } = props ?? {};

    return userControllerRegAvailableCompanySet(userId, count, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerRegAvailableCompanySetMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerRegAvailableCompanySet>>
>;

export type UserControllerRegAvailableCompanySetMutationError =
  ErrorType<unknown>;

/**
 * @summary 실시간 대출문의 업체 등록 카운트 설정
 */
export const useUserControllerRegAvailableCompanySet = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerRegAvailableCompanySet>>,
      TError,
      { userId: string; count: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerRegAvailableCompanySet>>,
  TError,
  { userId: string; count: number },
  TContext
> => {
  const mutationOptions =
    getUserControllerRegAvailableCompanySetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
