/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Loan API
 * Loan API description
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateNoticeDto,
  NoticeResponseDto,
  UpdateNoticeDto,
} from "../../const";

import { customInstance } from "../../../shared/axios/lib/customInstance";
import type {
  ErrorType,
  BodyType,
} from "../../../shared/axios/lib/customInstance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * ÏÉàÎ°úÏö¥ Í≥µÏßÄÏÇ¨Ìï≠ÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§.
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ ÏÉùÏÑ±
 */
export const noticeControllerCreateNotice = (
  createNoticeDto: BodyType<CreateNoticeDto>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<NoticeResponseDto>(
    {
      url: `/notice`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createNoticeDto,
      signal,
    },
    options,
  );
};

export const getNoticeControllerCreateNoticeMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof noticeControllerCreateNotice>>,
    TError,
    { data: BodyType<CreateNoticeDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof noticeControllerCreateNotice>>,
  TError,
  { data: BodyType<CreateNoticeDto> },
  TContext
> => {
  const mutationKey = ["noticeControllerCreateNotice"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof noticeControllerCreateNotice>>,
    { data: BodyType<CreateNoticeDto> }
  > = (props) => {
    const { data } = props ?? {};

    return noticeControllerCreateNotice(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type NoticeControllerCreateNoticeMutationResult = NonNullable<
  Awaited<ReturnType<typeof noticeControllerCreateNotice>>
>;
export type NoticeControllerCreateNoticeMutationBody =
  BodyType<CreateNoticeDto>;
export type NoticeControllerCreateNoticeMutationError = ErrorType<unknown>;

/**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ ÏÉùÏÑ±
 */
export const useNoticeControllerCreateNotice = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof noticeControllerCreateNotice>>,
      TError,
      { data: BodyType<CreateNoticeDto> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof noticeControllerCreateNotice>>,
  TError,
  { data: BodyType<CreateNoticeDto> },
  TContext
> => {
  const mutationOptions =
    getNoticeControllerCreateNoticeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Î™®Îì† Í≥µÏßÄÏÇ¨Ìï≠ÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ Î™©Î°ù Ï°∞Ìöå
 */
export const noticeControllerGetNotices = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<NoticeResponseDto[]>(
    { url: `/notice`, method: "GET", signal },
    options,
  );
};

export const getNoticeControllerGetNoticesQueryKey = () => {
  return [`/notice`] as const;
};

export const getNoticeControllerGetNoticesQueryOptions = <
  TData = Awaited<ReturnType<typeof noticeControllerGetNotices>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof noticeControllerGetNotices>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getNoticeControllerGetNoticesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof noticeControllerGetNotices>>
  > = ({ signal }) => noticeControllerGetNotices(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof noticeControllerGetNotices>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type NoticeControllerGetNoticesQueryResult = NonNullable<
  Awaited<ReturnType<typeof noticeControllerGetNotices>>
>;
export type NoticeControllerGetNoticesQueryError = ErrorType<unknown>;

export function useNoticeControllerGetNotices<
  TData = Awaited<ReturnType<typeof noticeControllerGetNotices>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof noticeControllerGetNotices>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof noticeControllerGetNotices>>,
          TError,
          Awaited<ReturnType<typeof noticeControllerGetNotices>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useNoticeControllerGetNotices<
  TData = Awaited<ReturnType<typeof noticeControllerGetNotices>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof noticeControllerGetNotices>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof noticeControllerGetNotices>>,
          TError,
          Awaited<ReturnType<typeof noticeControllerGetNotices>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useNoticeControllerGetNotices<
  TData = Awaited<ReturnType<typeof noticeControllerGetNotices>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof noticeControllerGetNotices>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ Î™©Î°ù Ï°∞Ìöå
 */

export function useNoticeControllerGetNotices<
  TData = Awaited<ReturnType<typeof noticeControllerGetNotices>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof noticeControllerGetNotices>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getNoticeControllerGetNoticesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÌäπÏ†ï Í≥µÏßÄÏÇ¨Ìï≠ÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ Ï°∞Ìöå
 */
export const noticeControllerGetNotice = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<NoticeResponseDto>(
    { url: `/notice/${id}`, method: "GET", signal },
    options,
  );
};

export const getNoticeControllerGetNoticeQueryKey = (id: string) => {
  return [`/notice/${id}`] as const;
};

export const getNoticeControllerGetNoticeQueryOptions = <
  TData = Awaited<ReturnType<typeof noticeControllerGetNotice>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof noticeControllerGetNotice>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getNoticeControllerGetNoticeQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof noticeControllerGetNotice>>
  > = ({ signal }) => noticeControllerGetNotice(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof noticeControllerGetNotice>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type NoticeControllerGetNoticeQueryResult = NonNullable<
  Awaited<ReturnType<typeof noticeControllerGetNotice>>
>;
export type NoticeControllerGetNoticeQueryError = ErrorType<unknown>;

export function useNoticeControllerGetNotice<
  TData = Awaited<ReturnType<typeof noticeControllerGetNotice>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof noticeControllerGetNotice>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof noticeControllerGetNotice>>,
          TError,
          Awaited<ReturnType<typeof noticeControllerGetNotice>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useNoticeControllerGetNotice<
  TData = Awaited<ReturnType<typeof noticeControllerGetNotice>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof noticeControllerGetNotice>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof noticeControllerGetNotice>>,
          TError,
          Awaited<ReturnType<typeof noticeControllerGetNotice>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useNoticeControllerGetNotice<
  TData = Awaited<ReturnType<typeof noticeControllerGetNotice>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof noticeControllerGetNotice>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ Ï°∞Ìöå
 */

export function useNoticeControllerGetNotice<
  TData = Awaited<ReturnType<typeof noticeControllerGetNotice>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof noticeControllerGetNotice>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getNoticeControllerGetNoticeQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Í∏∞Ï°¥ Í≥µÏßÄÏÇ¨Ìï≠ÏùÑ ÏàòÏ†ïÌï©ÎãàÎã§.
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ ÏàòÏ†ï
 */
export const noticeControllerUpdateNotice = (
  id: string,
  updateNoticeDto: BodyType<UpdateNoticeDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<NoticeResponseDto>(
    {
      url: `/notice/${id}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateNoticeDto,
    },
    options,
  );
};

export const getNoticeControllerUpdateNoticeMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof noticeControllerUpdateNotice>>,
    TError,
    { id: string; data: BodyType<UpdateNoticeDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof noticeControllerUpdateNotice>>,
  TError,
  { id: string; data: BodyType<UpdateNoticeDto> },
  TContext
> => {
  const mutationKey = ["noticeControllerUpdateNotice"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof noticeControllerUpdateNotice>>,
    { id: string; data: BodyType<UpdateNoticeDto> }
  > = (props) => {
    const { id, data } = props ?? {};

    return noticeControllerUpdateNotice(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type NoticeControllerUpdateNoticeMutationResult = NonNullable<
  Awaited<ReturnType<typeof noticeControllerUpdateNotice>>
>;
export type NoticeControllerUpdateNoticeMutationBody =
  BodyType<UpdateNoticeDto>;
export type NoticeControllerUpdateNoticeMutationError = ErrorType<unknown>;

/**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ ÏàòÏ†ï
 */
export const useNoticeControllerUpdateNotice = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof noticeControllerUpdateNotice>>,
      TError,
      { id: string; data: BodyType<UpdateNoticeDto> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof noticeControllerUpdateNotice>>,
  TError,
  { id: string; data: BodyType<UpdateNoticeDto> },
  TContext
> => {
  const mutationOptions =
    getNoticeControllerUpdateNoticeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Í∏∞Ï°¥ Í≥µÏßÄÏÇ¨Ìï≠ÏùÑ ÏÇ≠Ï†úÌï©ÎãàÎã§.
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ ÏÇ≠Ï†ú
 */
export const noticeControllerDeleteNotice = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/notice/${id}`, method: "DELETE" },
    options,
  );
};

export const getNoticeControllerDeleteNoticeMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof noticeControllerDeleteNotice>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof noticeControllerDeleteNotice>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["noticeControllerDeleteNotice"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof noticeControllerDeleteNotice>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return noticeControllerDeleteNotice(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type NoticeControllerDeleteNoticeMutationResult = NonNullable<
  Awaited<ReturnType<typeof noticeControllerDeleteNotice>>
>;

export type NoticeControllerDeleteNoticeMutationError = ErrorType<unknown>;

/**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ ÏÇ≠Ï†ú
 */
export const useNoticeControllerDeleteNotice = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof noticeControllerDeleteNotice>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof noticeControllerDeleteNotice>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getNoticeControllerDeleteNoticeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
