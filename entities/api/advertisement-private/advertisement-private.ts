/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Loan API
 * ÏßÄÏó≠, ÏÉÅÌíà Îì±ÏùÑ QueryÎ•º ÌÜµÌï¥ Ïó¨Îü¨ Í∞úÎ•º Î≥¥ÎÇº ÎïåÎäî ÏΩ§Îßà(,)Î°ú Íµ¨Î∂ÑÌïòÏó¨ Î≥¥ÎÇ¥Ï£ºÏÑ∏Ïöî. ÏòàÏãú: ?location=ÏÑúÏö∏,Î∂ÄÏÇ∞,ÎåÄÍµ¨
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { AdResponseDto } from "../../const";

import { customInstance } from "../../../shared/axios/lib/customInstance";
import type { ErrorType } from "../../../shared/axios/lib/customInstance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get all pending groups
 */
export const adsPrivateControllerFindAllPendingGroup = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<string[]>(
    { url: `/ads/pending-group-list`, method: "GET", signal },
    options,
  );
};

export const getAdsPrivateControllerFindAllPendingGroupQueryKey = () => {
  return [`/ads/pending-group-list`] as const;
};

export const getAdsPrivateControllerFindAllPendingGroupQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
  TError = ErrorType<string[]>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPrivateControllerFindAllPendingGroupQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>
  > = ({ signal }) =>
    adsPrivateControllerFindAllPendingGroup(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPrivateControllerFindAllPendingGroupQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>
>;
export type AdsPrivateControllerFindAllPendingGroupQueryError = ErrorType<
  string[]
>;

export function useAdsPrivateControllerFindAllPendingGroup<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
  TError = ErrorType<string[]>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
          TError,
          Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllPendingGroup<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
  TError = ErrorType<string[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
          TError,
          Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllPendingGroup<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
  TError = ErrorType<string[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all pending groups
 */

export function useAdsPrivateControllerFindAllPendingGroup<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
  TError = ErrorType<string[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllPendingGroup>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getAdsPrivateControllerFindAllPendingGroupQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all advertisements by group ID
 */
export const adsPrivateControllerFindAllByGroupId = (
  groupId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    { url: `/ads/pending-group/${groupId}`, method: "GET", signal },
    options,
  );
};

export const getAdsPrivateControllerFindAllByGroupIdQueryKey = (
  groupId: string,
) => {
  return [`/ads/pending-group/${groupId}`] as const;
};

export const getAdsPrivateControllerFindAllByGroupIdQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  groupId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPrivateControllerFindAllByGroupIdQueryKey(groupId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>
  > = ({ signal }) =>
    adsPrivateControllerFindAllByGroupId(groupId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!groupId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPrivateControllerFindAllByGroupIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>
>;
export type AdsPrivateControllerFindAllByGroupIdQueryError = ErrorType<
  AdResponseDto[]
>;

export function useAdsPrivateControllerFindAllByGroupId<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  groupId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
          TError,
          Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllByGroupId<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  groupId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
          TError,
          Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllByGroupId<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  groupId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all advertisements by group ID
 */

export function useAdsPrivateControllerFindAllByGroupId<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
  TError = ErrorType<AdResponseDto[]>,
>(
  groupId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllByGroupId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdsPrivateControllerFindAllByGroupIdQueryOptions(
    groupId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Approve advertisement registration
 */
export const adsPrivateControllerApprove = (
  groupId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/approve/registration/${groupId}`, method: "PATCH" },
    options,
  );
};

export const getAdsPrivateControllerApproveMutationOptions = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPrivateControllerApprove>>,
    TError,
    { groupId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPrivateControllerApprove>>,
  TError,
  { groupId: string },
  TContext
> => {
  const mutationKey = ["adsPrivateControllerApprove"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPrivateControllerApprove>>,
    { groupId: string }
  > = (props) => {
    const { groupId } = props ?? {};

    return adsPrivateControllerApprove(groupId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPrivateControllerApproveMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerApprove>>
>;

export type AdsPrivateControllerApproveMutationError = ErrorType<AdResponseDto>;

/**
 * @summary Approve advertisement registration
 */
export const useAdsPrivateControllerApprove = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPrivateControllerApprove>>,
      TError,
      { groupId: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPrivateControllerApprove>>,
  TError,
  { groupId: string },
  TContext
> => {
  const mutationOptions =
    getAdsPrivateControllerApproveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Reject advertisement registration
 */
export const adsPrivateControllerReject = (
  groupId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/reject/registration/${groupId}`, method: "PATCH" },
    options,
  );
};

export const getAdsPrivateControllerRejectMutationOptions = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPrivateControllerReject>>,
    TError,
    { groupId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPrivateControllerReject>>,
  TError,
  { groupId: string },
  TContext
> => {
  const mutationKey = ["adsPrivateControllerReject"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPrivateControllerReject>>,
    { groupId: string }
  > = (props) => {
    const { groupId } = props ?? {};

    return adsPrivateControllerReject(groupId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPrivateControllerRejectMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerReject>>
>;

export type AdsPrivateControllerRejectMutationError = ErrorType<AdResponseDto>;

/**
 * @summary Reject advertisement registration
 */
export const useAdsPrivateControllerReject = <
  TError = ErrorType<AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPrivateControllerReject>>,
      TError,
      { groupId: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPrivateControllerReject>>,
  TError,
  { groupId: string },
  TContext
> => {
  const mutationOptions = getAdsPrivateControllerRejectMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get all advertisements waiting for approval
 */
export const adsPrivateControllerFindAllWaitingApproval = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    { url: `/ads/waiting-approval/all`, method: "GET", signal },
    options,
  );
};

export const getAdsPrivateControllerFindAllWaitingApprovalQueryKey = () => {
  return [`/ads/waiting-approval/all`] as const;
};

export const getAdsPrivateControllerFindAllWaitingApprovalQueryOptions = <
  TData = Awaited<
    ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPrivateControllerFindAllWaitingApprovalQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>>
  > = ({ signal }) =>
    adsPrivateControllerFindAllWaitingApproval(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPrivateControllerFindAllWaitingApprovalQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>>
>;
export type AdsPrivateControllerFindAllWaitingApprovalQueryError = ErrorType<
  void | AdResponseDto[]
>;

export function useAdsPrivateControllerFindAllWaitingApproval<
  TData = Awaited<
    ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>
          >,
          TError,
          Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllWaitingApproval<
  TData = Awaited<
    ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>
          >,
          TError,
          Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllWaitingApproval<
  TData = Awaited<
    ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all advertisements waiting for approval
 */

export function useAdsPrivateControllerFindAllWaitingApproval<
  TData = Awaited<
    ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingApproval>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getAdsPrivateControllerFindAllWaitingApprovalQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all advertisements waiting for registration
 */
export const adsPrivateControllerFindAllWaitingRegistration = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    { url: `/ads/waiting-approval/register`, method: "GET", signal },
    options,
  );
};

export const getAdsPrivateControllerFindAllWaitingRegistrationQueryKey = () => {
  return [`/ads/waiting-approval/register`] as const;
};

export const getAdsPrivateControllerFindAllWaitingRegistrationQueryOptions = <
  TData = Awaited<
    ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<
        ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
      >,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPrivateControllerFindAllWaitingRegistrationQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>>
  > = ({ signal }) =>
    adsPrivateControllerFindAllWaitingRegistration(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPrivateControllerFindAllWaitingRegistrationQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>>
  >;
export type AdsPrivateControllerFindAllWaitingRegistrationQueryError =
  ErrorType<void | AdResponseDto[]>;

export function useAdsPrivateControllerFindAllWaitingRegistration<
  TData = Awaited<
    ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
          >,
          TError,
          Awaited<
            ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
          >
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllWaitingRegistration<
  TData = Awaited<
    ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
          >,
          TError,
          Awaited<
            ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
          >
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllWaitingRegistration<
  TData = Awaited<
    ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all advertisements waiting for registration
 */

export function useAdsPrivateControllerFindAllWaitingRegistration<
  TData = Awaited<
    ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
  >,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof adsPrivateControllerFindAllWaitingRegistration>
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getAdsPrivateControllerFindAllWaitingRegistrationQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all advertisements waiting for update
 */
export const adsPrivateControllerFindAllWaitingUpdate = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    { url: `/ads/waiting-approval/update`, method: "GET", signal },
    options,
  );
};

export const getAdsPrivateControllerFindAllWaitingUpdateQueryKey = () => {
  return [`/ads/waiting-approval/update`] as const;
};

export const getAdsPrivateControllerFindAllWaitingUpdateQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPrivateControllerFindAllWaitingUpdateQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>
  > = ({ signal }) =>
    adsPrivateControllerFindAllWaitingUpdate(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPrivateControllerFindAllWaitingUpdateQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>
>;
export type AdsPrivateControllerFindAllWaitingUpdateQueryError = ErrorType<
  void | AdResponseDto[]
>;

export function useAdsPrivateControllerFindAllWaitingUpdate<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
          TError,
          Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllWaitingUpdate<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
          TError,
          Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllWaitingUpdate<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all advertisements waiting for update
 */

export function useAdsPrivateControllerFindAllWaitingUpdate<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingUpdate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getAdsPrivateControllerFindAllWaitingUpdateQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all advertisements waiting for extend
 */
export const adsPrivateControllerFindAllWaitingExtend = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AdResponseDto[]>(
    { url: `/ads/waiting-approval/extend`, method: "GET", signal },
    options,
  );
};

export const getAdsPrivateControllerFindAllWaitingExtendQueryKey = () => {
  return [`/ads/waiting-approval/extend`] as const;
};

export const getAdsPrivateControllerFindAllWaitingExtendQueryOptions = <
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdsPrivateControllerFindAllWaitingExtendQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>
  > = ({ signal }) =>
    adsPrivateControllerFindAllWaitingExtend(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdsPrivateControllerFindAllWaitingExtendQueryResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>
>;
export type AdsPrivateControllerFindAllWaitingExtendQueryError = ErrorType<
  void | AdResponseDto[]
>;

export function useAdsPrivateControllerFindAllWaitingExtend<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
          TError,
          Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllWaitingExtend<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
          TError,
          Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdsPrivateControllerFindAllWaitingExtend<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all advertisements waiting for extend
 */

export function useAdsPrivateControllerFindAllWaitingExtend<
  TData = Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
  TError = ErrorType<void | AdResponseDto[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adsPrivateControllerFindAllWaitingExtend>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getAdsPrivateControllerFindAllWaitingExtendQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Approve date extension for advertisement
 */
export const adsPrivateControllerApproveDateExtend = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/approve-date-extend/${id}`, method: "PATCH" },
    options,
  );
};

export const getAdsPrivateControllerApproveDateExtendMutationOptions = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPrivateControllerApproveDateExtend>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPrivateControllerApproveDateExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["adsPrivateControllerApproveDateExtend"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPrivateControllerApproveDateExtend>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return adsPrivateControllerApproveDateExtend(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPrivateControllerApproveDateExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerApproveDateExtend>>
>;

export type AdsPrivateControllerApproveDateExtendMutationError =
  ErrorType<void | AdResponseDto>;

/**
 * @summary Approve date extension for advertisement
 */
export const useAdsPrivateControllerApproveDateExtend = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPrivateControllerApproveDateExtend>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPrivateControllerApproveDateExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdsPrivateControllerApproveDateExtendMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Approve count extension for advertisement
 */
export const adsPrivateControllerApproveCountExtend = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/approve-count-extend/${id}`, method: "PATCH" },
    options,
  );
};

export const getAdsPrivateControllerApproveCountExtendMutationOptions = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPrivateControllerApproveCountExtend>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPrivateControllerApproveCountExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["adsPrivateControllerApproveCountExtend"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPrivateControllerApproveCountExtend>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return adsPrivateControllerApproveCountExtend(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPrivateControllerApproveCountExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerApproveCountExtend>>
>;

export type AdsPrivateControllerApproveCountExtendMutationError =
  ErrorType<void | AdResponseDto>;

/**
 * @summary Approve count extension for advertisement
 */
export const useAdsPrivateControllerApproveCountExtend = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPrivateControllerApproveCountExtend>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPrivateControllerApproveCountExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdsPrivateControllerApproveCountExtendMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Reject date extension for advertisement
 */
export const adsPrivateControllerRejectDateExtend = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/reject-date-extend/${id}`, method: "PATCH" },
    options,
  );
};

export const getAdsPrivateControllerRejectDateExtendMutationOptions = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPrivateControllerRejectDateExtend>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPrivateControllerRejectDateExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["adsPrivateControllerRejectDateExtend"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPrivateControllerRejectDateExtend>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return adsPrivateControllerRejectDateExtend(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPrivateControllerRejectDateExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerRejectDateExtend>>
>;

export type AdsPrivateControllerRejectDateExtendMutationError =
  ErrorType<void | AdResponseDto>;

/**
 * @summary Reject date extension for advertisement
 */
export const useAdsPrivateControllerRejectDateExtend = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPrivateControllerRejectDateExtend>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPrivateControllerRejectDateExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdsPrivateControllerRejectDateExtendMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Reject count extension for advertisement
 */
export const adsPrivateControllerRejectCountExtend = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/reject-count-extend/${id}`, method: "PATCH" },
    options,
  );
};

export const getAdsPrivateControllerRejectCountExtendMutationOptions = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPrivateControllerRejectCountExtend>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPrivateControllerRejectCountExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["adsPrivateControllerRejectCountExtend"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPrivateControllerRejectCountExtend>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return adsPrivateControllerRejectCountExtend(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPrivateControllerRejectCountExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerRejectCountExtend>>
>;

export type AdsPrivateControllerRejectCountExtendMutationError =
  ErrorType<void | AdResponseDto>;

/**
 * @summary Reject count extension for advertisement
 */
export const useAdsPrivateControllerRejectCountExtend = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPrivateControllerRejectCountExtend>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPrivateControllerRejectCountExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdsPrivateControllerRejectCountExtendMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Approve advertisement update
 */
export const adsPrivateControllerApproveUpdate = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/approve-update/${id}`, method: "PATCH" },
    options,
  );
};

export const getAdsPrivateControllerApproveUpdateMutationOptions = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPrivateControllerApproveUpdate>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPrivateControllerApproveUpdate>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["adsPrivateControllerApproveUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPrivateControllerApproveUpdate>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return adsPrivateControllerApproveUpdate(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPrivateControllerApproveUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerApproveUpdate>>
>;

export type AdsPrivateControllerApproveUpdateMutationError =
  ErrorType<void | AdResponseDto>;

/**
 * @summary Approve advertisement update
 */
export const useAdsPrivateControllerApproveUpdate = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPrivateControllerApproveUpdate>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPrivateControllerApproveUpdate>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdsPrivateControllerApproveUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Reject advertisement update
 */
export const adsPrivateControllerRejectUpdate = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AdResponseDto>(
    { url: `/ads/reject-update/${id}`, method: "PATCH" },
    options,
  );
};

export const getAdsPrivateControllerRejectUpdateMutationOptions = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adsPrivateControllerRejectUpdate>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adsPrivateControllerRejectUpdate>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["adsPrivateControllerRejectUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adsPrivateControllerRejectUpdate>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return adsPrivateControllerRejectUpdate(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdsPrivateControllerRejectUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof adsPrivateControllerRejectUpdate>>
>;

export type AdsPrivateControllerRejectUpdateMutationError =
  ErrorType<void | AdResponseDto>;

/**
 * @summary Reject advertisement update
 */
export const useAdsPrivateControllerRejectUpdate = <
  TError = ErrorType<void | AdResponseDto>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adsPrivateControllerRejectUpdate>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adsPrivateControllerRejectUpdate>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdsPrivateControllerRejectUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
